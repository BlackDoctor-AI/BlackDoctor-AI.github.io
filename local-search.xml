<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>性能优化[Web]</title>
    <link href="/WebPage/2022/07/07/index7/"/>
    <url>/WebPage/2022/07/07/index7/</url>
    
    <content type="html"><![CDATA[<p><a href="#%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96"><code>1.xxx</code></a></p><h2 id="XXX"><a href="#XXX" class="headerlink" title="XXX"></a><span id="性能优化">XXX</span></h2>]]></content>
    
    
    <categories>
      
      <category>Web和移动页面的制作</category>
      
      <category>性能优化</category>
      
    </categories>
    
    
    <tags>
      
      <tag>性能优化</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>终端设备检测[Web]</title>
    <link href="/WebPage/2022/07/07/index6/"/>
    <url>/WebPage/2022/07/07/index6/</url>
    
    <content type="html"><![CDATA[<p><a href="#%E7%BB%88%E7%AB%AF%E8%AE%BE%E5%A4%87%E6%A3%80%E6%B5%8B"><code>1.xxx</code></a></p><h2 id="XXX"><a href="#XXX" class="headerlink" title="XXX"></a><span id="终端设备检测">XXX</span></h2>]]></content>
    
    
    <categories>
      
      <category>Web和移动页面的制作</category>
      
      <category>终端设备检测</category>
      
    </categories>
    
    
    <tags>
      
      <tag>终端设备检测</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>移动适用、事件[Web]</title>
    <link href="/WebPage/2022/07/07/index5/"/>
    <url>/WebPage/2022/07/07/index5/</url>
    
    <content type="html"><![CDATA[<p><a href="#%E7%A7%BB%E5%8A%A8%E9%80%82%E7%94%A8%E4%BA%8B%E4%BB%B6"><code>1.xxx</code></a></p><h2 id="XXX"><a href="#XXX" class="headerlink" title="XXX"></a><span id="移动适用事件">XXX</span></h2>]]></content>
    
    
    <categories>
      
      <category>Web和移动页面的制作</category>
      
      <category>移动适用、事件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>移动适用、事件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>响应式布局[web]</title>
    <link href="/WebPage/2022/07/07/index4/"/>
    <url>/WebPage/2022/07/07/index4/</url>
    
    <content type="html"><![CDATA[<p><a href="#%E5%93%8D%E5%BA%94%E5%BC%8F%E5%B8%83%E5%B1%80"><code>1.xxx</code></a></p><h2 id="XXX"><a href="#XXX" class="headerlink" title="XXX"></a><span id="响应式布局">XXX</span></h2>]]></content>
    
    
    <categories>
      
      <category>Web和移动页面的制作</category>
      
      <category>响应式布局</category>
      
    </categories>
    
    
    <tags>
      
      <tag>响应式布局</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Flex布局[Web]</title>
    <link href="/WebPage/2022/07/07/index3/"/>
    <url>/WebPage/2022/07/07/index3/</url>
    
    <content type="html"><![CDATA[<p><a href="#Flex%E5%B8%83%E5%B1%80"><code>1.xxx</code></a></p><h2 id="XXX"><a href="#XXX" class="headerlink" title="XXX"></a><span id="Flex布局">XXX</span></h2>]]></content>
    
    
    <categories>
      
      <category>Web和移动页面的制作</category>
      
      <category>Flex布局</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Flex布局</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web基本布局和移动端布局[Web]</title>
    <link href="/WebPage/2022/07/07/index1/"/>
    <url>/WebPage/2022/07/07/index1/</url>
    
    <content type="html"><![CDATA[<p><a href="#Web%E5%9F%BA%E6%9C%AC%E5%B8%83%E5%B1%80%E5%92%8C%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%B8%83%E5%B1%801"><code>1.PC端和移动端的区别</code></a></p><h2 id="PC端和移动端的区别"><a href="#PC端和移动端的区别" class="headerlink" title="PC端和移动端的区别"></a><span id="Web基本布局和移动端布局1">PC端和移动端的区别</span></h2><ol><li><p>PC端和移动端的区别：<br>PC端:屏幕大用网页固定版心,要考虑浏览器兼容问题,(布局:浮动＋定位＋标准流)<br>移动端:<br>手机屏幕小，网页宽度多数为100%，是适配手机屏幕宽度<br>移动端则基本不需要考虑兼容性问题，放心大胆使用CSS新特性(布局:使用flex布局或者百分比布局)clear</p></li><li><p>分辨率<br>在PC端 1物理分辨率=1逻辑分辨率<br>在移动端 1物理分辨率=2逻辑分辨率 or 1:3 or 1:1</p></li><li><p>视口<br>视口就是浏览器显示哦页面内容的屏幕区域<br>分类:</p></li><li><p>布局视口：iOS, Android基本都将这个视口分辨率设置为980px</p></li><li><p>视觉视口：用户正在看到的网站的区域</p></li><li><p>理想视口：设备屏幕有多宽,浏览器显示页面就有多宽</p></li><li><p>视口标签<br>有了视口标签可以达到我们想要的理想标签</p></li></ol><meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0">width=device-width：视口宽度=设备宽度initial-scale=1.0：初始页面缩放倍数maximum-scale=1.0 最大缩放倍数  user-scalable=0 不允许用户缩放页面（移动端） 或者为 no 如果为 yes 则允许用户缩放<ol start="5"><li>二倍图<br>设计师给我们的图片一般是二倍图,我们前端工程师拿到设计稿利用像素大厨选择2X, 进行缩小一半, 按照提示的单位开发即可。</li></ol>]]></content>
    
    
    <categories>
      
      <category>Web和移动页面的制作</category>
      
      <category>Web基本布局和移动端布局</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web基本布局和移动端布局</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>接口的制作和引用[ES]</title>
    <link href="/ES6789/2022/07/05/index8/"/>
    <url>/ES6789/2022/07/05/index8/</url>
    
    <content type="html"><![CDATA[<p><a href="#%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%88%B6%E4%BD%9C%E5%92%8C%E5%BC%95%E7%94%A81"><code>1.迭代器（Iterator）</code></a> <a href="#%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%88%B6%E4%BD%9C%E5%92%8C%E5%BC%95%E7%94%A82"><code>2.Set</code></a> <a href="#%E6%8E%A5%E5%8F%A3%E7%9A%84%E5%88%B6%E4%BD%9C%E5%92%8C%E5%BC%95%E7%94%A83"><code>3.Map</code></a></p><h2 id="迭代器（Iterator）"><a href="#迭代器（Iterator）" class="headerlink" title="迭代器（Iterator）"></a><span id="接口的制作和引用1">迭代器（Iterator）</span></h2><p>迭代器是一种接口，为各种不同的数据结构提供了<code>统一的访问机制</code>，任何数据结构只要部署了Iterator接口，就可以完成遍历操作</p><ul><li><code>ES6</code>创造了一种新的遍历命令for…of循环，Iterator接口主要供for…of消费<ul><li>for of保存的是键值，for in 保存的是键名</li></ul></li><li>原生具备iterator接口的数据（可用for of遍历）<ol><li>Array </li><li>Arguments </li><li>Set </li><li>Map </li><li>String </li><li>TypeArray </li><li>NodeList</li></ol></li><li>工作原理<ul><li>创建一个指针对象，指向当前数据结构的起始位置</li><li>第一次调用对象的next方法，指针自动指向数据结构的第一个成员</li><li>接下来不断调用next方法，调用一直往后移动，直到指向最后一个成员</li><li>每调用next方法返回一个包含value和done属性的对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 自定义遍历数据</span><br><span class="hljs-comment">// 示例一</span><br><span class="hljs-keyword">let</span> obj = &#123;<br>  <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;xxx&#x27;</span>,<br>  <span class="hljs-attr">stus</span>:[<span class="hljs-string">&#x27;xxx&#x27;</span>,<span class="hljs-string">&#x27;yyy&#x27;</span>,<span class="hljs-string">&#x27;zzz&#x27;</span>,<span class="hljs-string">&#x27;aaa&#x27;</span>],<br>  <span class="hljs-comment">// 开启一个迭代器，来自定义遍历数据</span><br>  [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]()&#123;<br>    <span class="hljs-keyword">let</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">next</span>:<span class="hljs-function">() =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span>(index &lt; <span class="hljs-variable language_">this</span>.<span class="hljs-property">stus</span>.<span class="hljs-property">length</span>)&#123;<br>          <span class="hljs-keyword">let</span> res = &#123;<span class="hljs-attr">value</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-property">stus</span>[index], <span class="hljs-attr">done</span>:<span class="hljs-literal">false</span>&#125;<br>          index++<br>          <span class="hljs-keyword">return</span> res<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">value</span>:<span class="hljs-literal">undefined</span>, <span class="hljs-attr">done</span>:<span class="hljs-literal">true</span>&#125;<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> obj) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);    <span class="hljs-comment">// &#x27;xxx&#x27;, &#x27;yyy&#x27;, &#x27;zzz&#x27;, &#x27;aaa&#x27;</span><br>&#125;<br><span class="hljs-comment">// 示例2</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">LinkedList</span> &#123;<br>  <span class="hljs-title function_">constructor</span>(<span class="hljs-params">data</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span> = data;<br>  &#125;<br><br>  <span class="hljs-title function_">firstItem</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span> i.<span class="hljs-property">head</span>);<br>  &#125;<br><br>  <span class="hljs-title function_">findById</span>(<span class="hljs-params">id</span>) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">data</span>.<span class="hljs-title function_">find</span>(<span class="hljs-function"><span class="hljs-params">i</span> =&gt;</span> i.<span class="hljs-property">id</span> === id);<br>  &#125;<br><br>  [<span class="hljs-title class_">Symbol</span>.<span class="hljs-property">iterator</span>]() &#123;<br>    <span class="hljs-keyword">let</span> item = &#123;<span class="hljs-attr">next</span>: <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">firstItem</span>().<span class="hljs-property">id</span>&#125;;<br>    <span class="hljs-keyword">return</span> &#123;<br>      <span class="hljs-attr">next</span>: <span class="hljs-function">() =&gt;</span> &#123;<br>        item = <span class="hljs-variable language_">this</span>.<span class="hljs-title function_">findById</span>(item.<span class="hljs-property">next</span>);<br>        <span class="hljs-keyword">if</span>(item) &#123;<br>          <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">value</span>: item.<span class="hljs-property">value</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">false</span>&#125;;<br>        &#125;<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-attr">value</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">done</span>: <span class="hljs-literal">true</span>&#125;;<br>      &#125;<br>    &#125;;<br>  &#125;<br>&#125;<br><br><span class="hljs-keyword">const</span> myList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>([<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;a10&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;First&#x27;</span>, <span class="hljs-attr">next</span>: <span class="hljs-string">&#x27;a13&#x27;</span>, <span class="hljs-attr">head</span>: <span class="hljs-literal">true</span> &#125;,<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;a11&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Last&#x27;</span>, <span class="hljs-attr">next</span>: <span class="hljs-literal">null</span>, <span class="hljs-attr">head</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;a12&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Third&#x27;</span>, <span class="hljs-attr">next</span>: <span class="hljs-string">&#x27;a11&#x27;</span>, <span class="hljs-attr">head</span>: <span class="hljs-literal">false</span> &#125;,<br>  &#123;<span class="hljs-attr">id</span>: <span class="hljs-string">&#x27;a13&#x27;</span>, <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Second&#x27;</span>, <span class="hljs-attr">next</span>: <span class="hljs-string">&#x27;a12&#x27;</span>, <span class="hljs-attr">head</span>: <span class="hljs-literal">false</span> &#125;<br>]);<br><br><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> item <span class="hljs-keyword">of</span> myList) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item);    <span class="hljs-comment">// &#x27;First&#x27;, &#x27;Second&#x27;, &#x27;Third&#x27;, &#x27;Last&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul></li></ul><h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a><span id="接口的制作和引用2">Set</span></h2><p><code>ES6</code> 提供了新的数据结构Set（集合），它类似于<code>数组</code>，但成员的值都是唯一的，集合实现了iterator接口，所以可以使用扩展运算符和for of进行遍历</p><ul><li><code>声明</code>：let s = new Set([]) 可传入一个可迭代对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>([<span class="hljs-string">&#x27;xx&#x27;</span>,<span class="hljs-string">&#x27;yy&#x27;</span>,<span class="hljs-string">&#x27;zz&#x27;</span>,<span class="hljs-string">&#x27;aa&#x27;</span>,<span class="hljs-string">&#x27;xx&#x27;</span>])  <span class="hljs-comment">// &#123;&#x27;xx&#x27;,&#x27;yy&#x27;,&#x27;zz&#x27;,&#x27;aa&#x27;&#125;,Set会自动去重</span><br></code></pre></td></tr></table></figure><code>api</code>:<br>size 元素个数，是一个属性<br>add() 添加新的元素<br>delete() 删除一个元素<br>clear() 清空集合</li></ul><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a><span id="接口的制作和引用3">Map</span></h2><p><code>ES6</code> 提供了Map数据结构，他类似于<code>对象</code>，也是键值对的集合，但是键的范围不限于字符串，各种类型的值（包括对象）都可以当作键，Map也实现了iterator接口，可以使用扩展运算符和for of进行遍历</p><ul><li><code>声明</code>：let m = new Map()<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> m = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Map</span>()<br>m.<span class="hljs-title function_">set</span>(<span class="hljs-string">&#x27;a&#x27;</span>,<span class="hljs-number">1</span>)<br></code></pre></td></tr></table></figure></li></ul><p><code>api</code>:<br>size 元素个数，是一个属性<br>set(key, value) 添加一个键值对，key可以是任意数据类型<br>delete(map.get(key)) 删除一个元素<br>clear() 清空Map</p>]]></content>
    
    
    <categories>
      
      <category>ES6789</category>
      
      <category>接口的制作和引用</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6789</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>calss类[ES]</title>
    <link href="/ES6789/2022/07/05/index7/"/>
    <url>/ES6789/2022/07/05/index7/</url>
    
    <content type="html"><![CDATA[<p><a href="#class%E7%B1%BB1"><code>1.xxx</code></a></p><h2 id="XXX"><a href="#XXX" class="headerlink" title="XXX"></a><span id="class类1">XXX</span></h2><p><code>ES6</code>提供了更接近传统语言的写法，引入Class类这个概念，作为对象的模板，通过Class关键字，可以定义类，ES6的class可以看作一个语法糖，他的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰，更像面向对象的写法而已</p><p>使用class关键字来声明类 class Phone{}</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> &#123;<br>    <span class="hljs-title function_">custructor</span>(<span class="hljs-params">brand, price</span>) &#123;  <span class="hljs-comment">// 构造器</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">brand</span> = brand<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">price</span> = price<br>    &#125;<br>    call ()&#123;&#125;   <span class="hljs-comment">// 定义方法，只能使用es6的语法</span><br>&#125;<br></code></pre></td></tr></table></figure><p>使用static关键字来声明类里面的静态成员，静态成员只有类内部能够访问，实例对象无法访问静态成员</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Son</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">Parent</span> &#123;<br>    <span class="hljs-title function_">custructor</span>(<span class="hljs-params">brand, price, color, size</span>)&#123;<br>        <span class="hljs-variable language_">super</span>(bradn, price)     <span class="hljs-comment">// 相当有调用了父类的构造函数 ==&gt; Phone.call(this, brand, price)</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">color</span> = color<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">size</span> = size<br>    &#125; <br>    <span class="hljs-title function_">photo</span>(<span class="hljs-params"></span>) &#123;&#125;<br>    <span class="hljs-title function_">playGanme</span>(<span class="hljs-params"></span>) &#123;&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>继承之后 父类的方法会在子类的原型链上</p><p>子类可以对父类方法的重写，重写同名方法后，实例对象调用方法会是子类的方法</p><p>class种getter和setter的设置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span>&#123;<br>    <span class="hljs-keyword">get</span> <span class="hljs-title function_">price</span>()&#123;    <span class="hljs-comment">// 当price属性被读取时会自动调用getter</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;price属性被读取了&#x27;</span>)<br>    &#125;<br>    <span class="hljs-keyword">set</span> <span class="hljs-title function_">price</span>(<span class="hljs-params">newVal</span>)&#123;  <span class="hljs-comment">// 当price属性被修改时会自动调用setter</span><br>      <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;price属性被修改了，修改成了&#x27;</span> + newVal)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>ES6789</category>
      
      <category>calss类</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6789</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Promise异步编程[ES]</title>
    <link href="/ES6789/2022/07/05/index6/"/>
    <url>/ES6789/2022/07/05/index6/</url>
    
    <content type="html"><![CDATA[<p><a href="#Promise%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B1"><code>1.生成器</code></a> <a href="#Promise%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B2"><code>2.Promise</code></a> <a href="#Promise%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B3"><code>3.async和await</code></a></p><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a><span id="Promise异步编程1">生成器</span></h2><p>生成器是<code>ES6</code>提供的一种异步编程方式，语法行为与传统的函数完全不同</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> * <span class="hljs-title function_">gen</span>(<span class="hljs-params"></span>)&#123;       <span class="hljs-comment">// 生成器是一个特殊的函数</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">111</span>)<br>  <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;xxxx&#x27;</span>        <span class="hljs-comment">// yield算是函数代码的分隔符，每掉一次next就会执行到一个yield的位置</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">222</span>)<br>  <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;xxxx&#x27;</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">333</span>)<br>  <span class="hljs-keyword">yield</span> <span class="hljs-string">&#x27;xxxx&#x27;</span><br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-number">444</span>)<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>解决异步编程</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 模拟异步方法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getUsers</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> data = <span class="hljs-string">&#x27;用户数据&#x27;</span><br>    iterator.<span class="hljs-title function_">next</span>(data)<br>  &#125;, <span class="hljs-number">1000</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getGoods</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> data = <span class="hljs-string">&#x27;商品数据&#x27;</span><br>    iterator.<span class="hljs-title function_">next</span>(data)<br>  &#125;, <span class="hljs-number">1000</span>)<br>&#125;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">getOrders</span>(<span class="hljs-params"></span>) &#123;<br>  <span class="hljs-built_in">setTimeout</span>(<span class="hljs-function">() =&gt;</span> &#123;<br>    <span class="hljs-keyword">let</span> data = <span class="hljs-string">&#x27;订单数据&#x27;</span><br>    iterator.<span class="hljs-title function_">next</span>(data)<br>  &#125;, <span class="hljs-number">1000</span>)<br>&#125;<br><span class="hljs-comment">// 获取异步数据</span><br><span class="hljs-keyword">function</span> * <span class="hljs-title function_">gen</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">let</span> users = <span class="hljs-keyword">yield</span> <span class="hljs-title function_">getUsers</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(users)<br>  <span class="hljs-keyword">let</span> orders = <span class="hljs-keyword">yield</span> <span class="hljs-title function_">getOrders</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(orders)<br>  <span class="hljs-keyword">let</span> goods = <span class="hljs-keyword">yield</span> <span class="hljs-title function_">getGoods</span>();<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(goods)<br>&#125;<br><span class="hljs-keyword">let</span> iterator = <span class="hljs-title function_">gen</span>()<br>iterator.<span class="hljs-title function_">next</span>()<br></code></pre></td></tr></table></figure><h2 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a><span id="Promise异步编程2">Promise</span></h2><p><code>Promise</code> 是<code>ES6</code>引入的异步编程的新解决方法，语法上Promise是一个构造函数，用来封装异步操作并可以获取其成功或失败的结果<br>为了解决回调地狱嵌套，所以在ES6中新增了一个API：promise</p><ul><li>Promise的英文就是保证，承诺的意思</li><li>Promise容器中存放了一个任务</li><li>有三种状态，Pending, Resolved, Rejected,成功了状态就从Pending -&gt; Resolved，失败了就从 Pending -&gt; Rejected</li></ul><p><strong>创建一个Promise容器</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  <span class="hljs-comment">// 这是一个异步任务</span><br>  fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./a.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(err) &#123;<br>      <span class="hljs-comment">// 失败了，承诺容器中的任务失败了</span><br>      <span class="hljs-comment">// 把容器的Pending状态改成Rejected</span><br>      <span class="hljs-comment">// 这里调用的resolve调用的第二个function</span><br>      <span class="hljs-title function_">reject</span>(err)<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-comment">// 承诺容器的任务成功了</span><br>      <span class="hljs-comment">// 把容器的Pending状态改成Resolve</span><br>      <span class="hljs-comment">// 这里调用的resolve调用的第一个function</span><br>      <span class="hljs-title function_">resolve</span>(data)<br>    &#125;<br>  &#125;)<br>&#125;)<br>​<br><span class="hljs-comment">// 当p1成功了，然后可以调用then做指定的动作</span><br><span class="hljs-comment">// then方法接收的function就是容器中的resolve</span><br>p1.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>&#125;,<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>&#125;)<br></code></pre></td></tr></table></figure><p><strong>解决异步编程嵌套问题</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./a.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(err) &#123;<br>      <span class="hljs-title function_">reject</span>(err)<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(data)<br>    &#125;<br>  &#125;)<br>&#125;)<br>​<br><span class="hljs-keyword">let</span> p2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>  fs.<span class="hljs-title function_">readFile</span>(<span class="hljs-string">&#x27;./b.txt&#x27;</span>, <span class="hljs-string">&#x27;utf8&#x27;</span>, <span class="hljs-function">(<span class="hljs-params">err, data</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">if</span>(err) &#123;<br>      <span class="hljs-title function_">reject</span>(err)<br>    &#125;<span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-title function_">resolve</span>(data)<br>    &#125;<br>  &#125;)<br>&#125;)<br>​<br>p1.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>  <span class="hljs-comment">// 当前函数中 return 的结果就可以在后面的then中function 接收到（return 什么接收到就是什么，没有就会收到undefined）</span><br>  <span class="hljs-comment">// 当return 一个Promise对象的时候，后面的then中的方法的第一个参数会作为p2 的resolve方法来调用</span><br>  <span class="hljs-keyword">return</span> p2<br>&#125;,<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>&#125;).<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)<br>&#125;,<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)<br>&#125;)<br></code></pre></td></tr></table></figure><p><em>Promise的catch方法<br>catch方法算是then方法的一个语法糖，只能指定失败的回调</em></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在then没有对失败进行处理的情况下，由catch处理所有失败的回调。</span><br>p1<br>.<span class="hljs-title function_">then</span>(<span class="hljs-function"><span class="hljs-params">data</span> =&gt;</span> &#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(data)&#125;)<br>.<span class="hljs-title function_">catch</span>(<span class="hljs-function"><span class="hljs-params">err</span>=&gt;</span>&#123;<span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(err)&#125;)<br></code></pre></td></tr></table></figure><h2 id="async和await"><a href="#async和await" class="headerlink" title="async和await"></a><span id="Promise异步编程3">async和await</span></h2><p><code>ES8</code><br>async 和 await 两种语法结合可以让异步代码像同步代码一样</p><ul><li><p>async表达式<br>在函数声明前面加上async修饰符来定义一个async函数，这个函数返回一个Promise对象，如果函数return一个字符串，则async返回一个成功的promise，如果throw Error，则async返回的就是一个失败的promise，如果return一个Promise对象，那么async返回的就是这个Promise状态的值</p></li><li><p>await表达式<br>await要放在async里面，await右侧的表达式一般为promise对象，await返回的是promise成功的值，await的promise失败了就会抛出异常，需要通过try..catch捕获处理</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">sendAJAX</span>(<span class="hljs-params">url</span>) &#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;<br>    <span class="hljs-keyword">const</span> x = <span class="hljs-keyword">new</span> <span class="hljs-title class_">XMLHttpRequest</span>();<br>    x.<span class="hljs-title function_">open</span>(<span class="hljs-string">&#x27;GET&#x27;</span>, url)<br>    x.<span class="hljs-title function_">send</span>()<br>    x.<span class="hljs-property">onreadystatechange</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;<br>      <span class="hljs-keyword">if</span>(x.<span class="hljs-property">readyState</span> === <span class="hljs-number">4</span>)&#123;<br>        <span class="hljs-keyword">if</span>(x.<span class="hljs-property">status</span> &gt;= <span class="hljs-number">200</span> &amp;&amp; x.<span class="hljs-property">status</span> &lt; <span class="hljs-number">300</span>) &#123;<br>          <span class="hljs-title function_">resolve</span>(x.<span class="hljs-property">response</span>)<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>          <span class="hljs-title function_">reject</span>(x.<span class="hljs-property">status</span>)<br>        &#125;<br>      &#125;<br>    &#125;<br>  &#125;)<br>&#125;<br>​<br><span class="hljs-keyword">async</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-comment">// 实现异步编程，类似于同步编程</span><br>  <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">sendAJAX</span>(<span class="hljs-string">&#x27;url&#x27;</span>)<br>  <span class="hljs-keyword">let</span> result = <span class="hljs-keyword">await</span> <span class="hljs-title function_">sendAJAX</span>(<span class="hljs-string">&#x27;url2&#x27;</span>)<br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>ES6789</category>
      
      <category>Promise异步编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6789</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>扩展[ES]</title>
    <link href="/ES6789/2022/07/05/index5/"/>
    <url>/ES6789/2022/07/05/index5/</url>
    
    <content type="html"><![CDATA[<p><a href="#%E6%89%A9%E5%B1%951"><code>1.对象</code></a> <a href="#%E6%89%A9%E5%B1%952"><code>2.数组</code></a> <a href="#%E6%89%A9%E5%B1%953"><code>3.数值</code></a> <a href="#%E6%89%A9%E5%B1%954"><code>4.函数</code></a> <a href="#%E6%89%A9%E5%B1%955"><code>5.ES6模块化</code></a> <a href="#%E6%89%A9%E5%B1%956"><code>6.Proxy和Reflect</code></a> <a href="#%E6%89%A9%E5%B1%957"><code>7.ES11</code></a></p><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a><span id="扩展1">对象</span></h2><p><code>ES6</code>允许在大括号里面，直接写入变量和函数，作为对象的属性和方法</p><ul><li><p>对象方法扩展</p><ul><li>Object.is 判断两个值是否相等 该方法判断NaN和NaN，返回true</li><li>Object.assign 对象的合并<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;localhost&#x27;</span>,<br>  <span class="hljs-attr">port</span>: <span class="hljs-number">3306</span>,<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;root&#x27;</span>,<br>  <span class="hljs-attr">pass</span>: <span class="hljs-string">&#x27;root&#x27;</span><br>&#125;<br><span class="hljs-keyword">const</span> obj2 = &#123;<br>  <span class="hljs-attr">host</span>: <span class="hljs-string">&#x27;http://atguigu.com&#x27;</span>,<br>  <span class="hljs-attr">port</span>: <span class="hljs-number">33060</span>,<br>  <span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;atguigu.com&#x27;</span>,<br>  <span class="hljs-attr">pass</span>:<span class="hljs-string">&#x27;iloveyou&#x27;</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Object</span>.<span class="hljs-title function_">assign</span>(obj, obj2))   <span class="hljs-comment">// 如果属性名不同则合并，要是一样就后者覆盖前者，合并的对象为浅拷贝</span><br></code></pre></td></tr></table></figure></li><li>Object.setPrototypeOf 设置原型对象</li><li>Object.getPrototypeOf 获取原型对象<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> school = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;尚硅谷&#x27;</span><br>&#125;<br><span class="hljs-keyword">const</span> cities = &#123;<br>  <span class="hljs-attr">city</span>: [<span class="hljs-string">&#x27;北京&#x27;</span>, <span class="hljs-string">&#x27;上海&#x27;</span>, <span class="hljs-string">&#x27;深圳&#x27;</span>]<br>&#125;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">setPrototypeOf</span>(school, cities) <span class="hljs-comment">// 给school设置原型对象</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(school)<br></code></pre></td></tr></table></figure></li></ul></li><li><p>对象方法扩展【ES8】</p><ul><li>Object.values() 返回一个给定对象的所有可枚举值的数组</li><li>Object.entries() 返回一个给定对象自身可遍历属性[key, value]数组</li><li>Object.getOwnPropertyDescriptors() 返回指定对象所有自身属性的描述对象（writable，configurable，enumerable）<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;<br>  <span class="hljs-attr">str</span>: <span class="hljs-string">&#x27;aaa&#x27;</span>,<br>  <span class="hljs-attr">num</span>: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">arr</span>: [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],<br>&#125;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">values</span>(obj) <span class="hljs-comment">// [&#x27;aaa&#x27;, 1, [1,2]]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">entries</span>(obj) <span class="hljs-comment">// [[&#x27;str&#x27;,&#x27;aaa&#x27;], [&#x27;num&#x27;,1], [&#x27;arr&#x27;,[1,2]]]</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyDescriptors</span>(obj) <br><span class="hljs-comment">// &#123;</span><br><span class="hljs-comment">//  str: &#123;value: &quot;aaa&quot;, writable: true, enumerable:true, configurable:true&#125;,</span><br><span class="hljs-comment">//  num: &#123;value: 1,writable:true,enumerable:true,configurable:true&#125;,</span><br><span class="hljs-comment">//  arr: &#123;value: [1,2],writable:true,enumerable:true,configurable:true&#125;</span><br><span class="hljs-comment">// &#125;</span><br></code></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>对象方法扩展【ES10】</p><ul><li>Object.fromEntries() 将二位数组转换成为对象，是Object.entries的逆运算<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> arr = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">7</span>]]<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">fromEntries</span>(arr) <span class="hljs-comment">// &#123;1:7,3:4,5:6&#125;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><p>对象的剩余参数和扩展运算符【ES9】</p><ol><li>对象的剩余参数和扩展运算符<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">connent</span>(<span class="hljs-params">&#123;host, port, ...user&#125;</span>)&#123;  <span class="hljs-comment">// 剩余参数会存在user对象种</span><br>  xxxx<br>&#125;<br><span class="hljs-keyword">const</span> mangseng = &#123;...tianyinbo, ...jinzhongzhao, ...tianleipo, ...menglongbaiwei&#125; <span class="hljs-comment">// 里面四个对象会被展开到mangseng中去</span><br></code></pre></td></tr></table></figure></li><li>正则扩展-命名捕获分组<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 正则命名捕获</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;&lt;a herf=&quot;www.baidu.com&quot;&gt;百度&lt;/a&gt;&#x27;</span><br><span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/&lt;a href=&quot;(.*)&quot;&gt;(.*)&lt;\/a&gt;/</span>   <span class="hljs-comment">// 提取url和标签文本</span><br><span class="hljs-keyword">const</span> result = reg.<span class="hljs-title function_">exec</span>(str)   <span class="hljs-comment">// 返回一个数组，0：匹配的字符串 1：捕获的第一位  2：捕获的第二位</span><br>​<br><span class="hljs-comment">// 正则命名捕获分组</span><br><span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/&lt;a href=&quot;(?&lt;url&gt;.*)&quot;&gt;(?&lt;text&gt;.*)&lt;\/a&gt;/</span>   <span class="hljs-comment">// 使用?&lt;&gt;分组，值会存在group对象里面</span><br></code></pre></td></tr></table></figure></li><li>正则扩展-反向断言<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 正则正向断言</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;JS5211314你知道吗555啦啦啦&#x27;</span><br><span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/\d+(?=啦)/</span>    <span class="hljs-comment">// 匹配后面跟着啦字的数字字符串</span><br><span class="hljs-keyword">const</span> result = reg.<span class="hljs-title function_">exec</span>(str)<br>​<br><span class="hljs-comment">// 正则反向断言</span><br><span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/\(?&lt;=啦)d+/</span><br></code></pre></td></tr></table></figure></li><li>dotAll模式<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/g</span>s    <span class="hljs-comment">// 正则后面加一个s，表示dotAll模式，这是.就能匹配任意字符</span><br></code></pre></td></tr></table></figure></li></ol></li><li></li></ul><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a><span id="扩展2">数组</span></h2><ul><li><p>数组扩展方法【ES7】</p><ul><li>数组includes方法<br>如果包含返回true，不包含就返回false<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> mingzhu = [<span class="hljs-string">&#x27;西游记&#x27;</span>, <span class="hljs-string">&#x27;红楼梦&#x27;</span>, <span class="hljs-string">&#x27;三国演义&#x27;</span>, <span class="hljs-string">&#x27;水浒传&#x27;</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(mingzhu.<span class="hljs-title function_">includes</span>(<span class="hljs-string">&#x27;西游记&#x27;</span>))  <span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure></li><li>幂运算**<br><code>ES7</code> 提供了幂运算符<br>2 ** 10 = 1024相当于Math.pow(2, 10)</li></ul></li><li><p>数组扩展方法【ES10】</p><ul><li>flat 将多维数组转化为低维的数组</li><li>flatMap 将多维数组转化为低维的数组在进行map操作<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> arr = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],[<span class="hljs-number">3</span>,<span class="hljs-number">4</span>],[<span class="hljs-number">5</span>,<span class="hljs-number">6</span>],[<span class="hljs-number">1</span>,<span class="hljs-number">7</span>]]<br><span class="hljs-keyword">let</span> arr1 = [[<span class="hljs-number">1</span>,<span class="hljs-number">2</span>],<span class="hljs-number">3</span>]<br>arr.<span class="hljs-title function_">flat</span>() <span class="hljs-comment">// [1,2,3,4,5,6,1,7]</span><br>arr1.<span class="hljs-title function_">flatMap</span>(<span class="hljs-function"><span class="hljs-params">item</span>=&gt;</span><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(item)) <span class="hljs-comment">// [1,2] 3</span><br></code></pre></td></tr></table></figure></li></ul></li><li><h2 id="数值"><a href="#数值" class="headerlink" title="数值"></a><span id="扩展3">数值</span></h2></li><li><p>Number.EPSILON 是JS表示的最小精度， 接近2.22E-16，可以实现小数的运算精度问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 在JS中，小数运算 0.1 + 0.2 !== 0.3</span><br><span class="hljs-comment">// 我们可以定义一个方法，如果两个数差值 &lt; number.EPSILON的话，我们就认为他是相等的</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">equal</span>(<span class="hljs-params">a, b</span>) &#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-title class_">Math</span>.<span class="hljs-title function_">abs</span>(a-b) &lt; <span class="hljs-title class_">Number</span>.<span class="hljs-property">EPSILON</span>) &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span><br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>进制</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 二进制0b开头，八进制0o开头，十六进制0x开头</span><br><span class="hljs-keyword">let</span> b = <span class="hljs-number">0b1010</span> <span class="hljs-comment">// 10</span><br><span class="hljs-keyword">let</span> o = <span class="hljs-number">0o777</span>  <span class="hljs-comment">// 511</span><br><span class="hljs-keyword">let</span> x = <span class="hljs-number">0xff</span>   <span class="hljs-comment">// 255</span><br></code></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> infinity = <span class="hljs-number">2</span> / <span class="hljs-number">0</span>; <span class="hljs-comment">// =&gt; Infinity 无限数</span><br><span class="hljs-keyword">let</span> n = <span class="hljs-title class_">NaN</span>; <span class="hljs-comment">// NaN</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">&#x27;111.11&#x27;</span><br><span class="hljs-keyword">let</span> float = <span class="hljs-number">11.11</span><br><br><span class="hljs-comment">// Number.isFinite 用于检测一个数是不是有限数</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isFinite</span>(infinity) <span class="hljs-comment">// false</span><br><br><span class="hljs-comment">// Number.isNaN 用于检测一个数值是否为NaN</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isNaN</span>(n) <span class="hljs-comment">// true</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">isNaN</span>(<span class="hljs-number">1</span>) <span class="hljs-comment">// false</span><br><br><span class="hljs-comment">// Number.parseInt() 字符串转整数</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseInt</span>(str) <span class="hljs-comment">// 111</span><br><span class="hljs-built_in">parseInt</span>(str) <span class="hljs-comment">// 111</span><br><br><span class="hljs-comment">// Number.parseFloat 字符串转小数</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-built_in">parseFloat</span>(str) <span class="hljs-comment">// 111.11</span><br><span class="hljs-built_in">parseFloat</span>(str) <span class="hljs-comment">// 111.11</span><br><br><span class="hljs-comment">// Number.isInteger 用于检测一个数值是不是整数</span><br><span class="hljs-title class_">Number</span>.<span class="hljs-title function_">isInteger</span>(float) <span class="hljs-comment">// false</span><br><br><span class="hljs-comment">// Math.trunc 用于把数字的小数部分抹掉</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">trunc</span>(float) <span class="hljs-comment">// 11</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">trunc</span>(str) <span class="hljs-comment">// 111</span><br><br><span class="hljs-comment">// Math.sign 用于判断一个数到底是正数 负数 还是0 正数返回1 0返回0 负数返回-1</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sign</span>(<span class="hljs-string">&#x27;-7&#x27;</span>) <span class="hljs-comment">//-1</span><br><span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sign</span>(<span class="hljs-number">7</span>) <span class="hljs-comment">// 1</span><br><br></code></pre></td></tr></table></figure></li><li><p>字符串扩展方法【ES10】</p><ul><li>trimStart 清除字符串左侧空白</li><li>trimEnd 清除字符串右侧空白<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> str1 = <span class="hljs-string">&#x27; trimStart &#x27;</span><br>str1.<span class="hljs-title function_">trimStart</span>() <span class="hljs-comment">// &#x27;trimStart &#x27;</span><br>str1.<span class="hljs-title function_">trimEnd</span>() <span class="hljs-comment">// &#x27; trimStart&#x27;</span><br></code></pre></td></tr></table></figure></li></ul></li><li><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a><span id="扩展4">函数</span></h2><h3 id="ES6允许参数赋初始值"><a href="#ES6允许参数赋初始值" class="headerlink" title="ES6允许参数赋初始值"></a>ES6允许参数赋初始值</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 如果不给c赋值，那么c就会等于初始值10</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">add</span> (a,b,c=<span class="hljs-number">10</span>)&#123;&#125;<br></code></pre></td></tr></table></figure><h3 id="rest参数"><a href="#rest参数" class="headerlink" title="rest参数"></a>rest参数</h3><p>ES6引入rest参数，用于获取函数的实参，用来代替argument</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">date</span>(<span class="hljs-params">...args</span>)&#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(args) <span class="hljs-comment">// args是一个装剩余参数的数组，可以使用数组方法</span><br>&#125;<br><span class="hljs-title function_">date</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>) <span class="hljs-comment">// [1,2,3]</span><br><span class="hljs-title function_">date</span>([<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]) <span class="hljs-comment">// [[1,2,3]]</span><br></code></pre></td></tr></table></figure><h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><p>… 扩展运算符能将数组转换为逗号分隔的参数序列</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(...arr)    <span class="hljs-comment">// 1 2 3</span><br><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xxx&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span><br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(...obj)  <span class="hljs-comment">// name:&#x27;xxx&#x27;  age:18</span><br></code></pre></td></tr></table></figure></li></ul><p><em>注意：与rest参数的区别：rest参数是形参，只能放在函数声明的参数里，扩展运算符可以展开数组，对象，伪数组。<br>使用扩展运算符展开的元素是浅拷贝</em></p><h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p><code>ES6</code>引入了一种新的原始数据类型Symbol，表示独一无二的值，他是JavaScript语言的第七种数据类型<br>前六种是：Undefined、Null、布尔值（Boolean）、字符串（String）、数值（Number）、对象（Object）。<br>特点：</p><ol><li>Symbol的值是唯一的，用来解决命名冲突的问题 </li><li>Symbol值不能与其他数据进行运算 </li><li>Symbol定义的对象属性不能使用for in 循环遍历，但是可以使用Reflect.ownKeys来获取对象的所有键名<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 用法一</span><br><span class="hljs-keyword">var</span> s1 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;foo&#x27;</span>);<br><span class="hljs-keyword">var</span> s2 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;bar&#x27;</span>);<br>s1 <span class="hljs-comment">// Symbol(foo)</span><br>s2 <span class="hljs-comment">// Symbol(bar)</span><br>s1.<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// &quot;Symbol(foo)&quot;</span><br>s2.<span class="hljs-title function_">toString</span>() <span class="hljs-comment">// &quot;Symbol(bar)&quot;</span><br><br><span class="hljs-comment">// 用法二</span><br><span class="hljs-keyword">var</span> s1 = <span class="hljs-title class_">Symbol</span>(); <span class="hljs-comment">// 没有参数的情况</span><br><span class="hljs-keyword">var</span> s2 = <span class="hljs-title class_">Symbol</span>();<br>s1 === s2 <span class="hljs-comment">// false</span><br><span class="hljs-keyword">var</span> s1 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;foo&quot;</span>); <span class="hljs-comment">// 有参数的情况</span><br><span class="hljs-keyword">var</span> s2 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br>s1 === s2 <span class="hljs-comment">// false</span><br><br><span class="hljs-comment">// 用法三---作为属性名的Symbol</span><br><span class="hljs-keyword">var</span> mySymbol = <span class="hljs-title class_">Symbol</span>();<br><span class="hljs-comment">// 第一种写法</span><br><span class="hljs-keyword">var</span> a = &#123;&#125;;<br>a[mySymbol] = <span class="hljs-string">&#x27;Hello!&#x27;</span>;<br><span class="hljs-comment">// 第二种写法</span><br><span class="hljs-keyword">var</span> a = &#123;<br>  [mySymbol]: <span class="hljs-string">&#x27;Hello!&#x27;</span><br>&#125;;<br>a[mySymbol] <span class="hljs-comment">// &quot;Hello!&quot;</span><br><span class="hljs-comment">// 第三种写法</span><br><span class="hljs-keyword">var</span> a = &#123;&#125;;<br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(a, mySymbol, &#123; <span class="hljs-attr">value</span>: <span class="hljs-string">&#x27;Hello!&#x27;</span> &#125;);<span class="hljs-comment">//ES5写法</span><br>a[mySymbol] <span class="hljs-comment">// &quot;Hello!&quot;</span><br><br><span class="hljs-comment">// 用法四</span><br><span class="hljs-keyword">var</span> mySymbol = <span class="hljs-title class_">Symbol</span>();<br><span class="hljs-keyword">var</span> a = &#123;&#125;;<br>a.<span class="hljs-property">mySymbol</span> = <span class="hljs-string">&#x27;Hello!&#x27;</span>;<br>a[mySymbol] <span class="hljs-comment">// undefined</span><br>a[<span class="hljs-string">&#x27;mySymbol&#x27;</span>] <span class="hljs-comment">// &quot;Hello!&quot;</span><br><br><span class="hljs-keyword">let</span> s = <span class="hljs-title class_">Symbol</span>();<br><span class="hljs-keyword">let</span> obj = &#123;<br>  [s]: <span class="hljs-keyword">function</span> (<span class="hljs-params">arg</span>) &#123; ... &#125;<br>&#125;;<br>obj[s](<span class="hljs-number">123</span>);<br></code></pre></td></tr></table></figure></li></ol><ul><li>Object.getOwnPropertySymbols方法，可以获取指定对象的所有Symbol属性名<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> obj = &#123;&#125;;<br><span class="hljs-keyword">var</span> foo = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br><span class="hljs-comment">// 在obj中添加属性为Symbol(&quot;foo&quot;) 值为foobar</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, foo, &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;foobar&quot;</span>,<br>&#125;); <span class="hljs-comment">// &#123;Symbol(foo): &quot;foobar&quot;&#125;</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(obj, <span class="hljs-string">&#x27;foo&#x27;</span>, &#123;<br>  <span class="hljs-attr">value</span>: <span class="hljs-string">&quot;foo&quot;</span>,<br>&#125;); <span class="hljs-comment">// &#123;foo: &quot;foo&quot;, Symbol(foo): &quot;foobar&quot;&#125;</span><br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i <span class="hljs-keyword">in</span> obj) &#123;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">// 无输出</span><br>&#125;<br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertyNames</span>(obj)<br><span class="hljs-comment">// []</span><br><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">getOwnPropertySymbols</span>(obj)<br><span class="hljs-comment">// [Symbol(foo)]</span><br></code></pre></td></tr></table></figure></li><li>Reflect.ownKeys方法可以返回所有类型的键名，包括常规键名和Symbol键名。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> obj = &#123;<br>  [<span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&#x27;my_key&#x27;</span>)]: <span class="hljs-number">1</span>,<br>  <span class="hljs-attr">enum</span>: <span class="hljs-number">2</span>,<br>  <span class="hljs-attr">nonEnum</span>: <span class="hljs-number">3</span><br>&#125;;<br><span class="hljs-title class_">Reflect</span>.<span class="hljs-title function_">ownKeys</span>(obj)<br><span class="hljs-comment">// [Symbol(my_key), &#x27;enum&#x27;, &#x27;nonEnum&#x27;]</span><br></code></pre></td></tr></table></figure></li><li>Symbol.for()，Symbol.keyFor()<br>Symbol.for()与Symbol()这两种写法，都会生成新的Symbol。它们的区别是，前者会<code>被登记</code>在全局环境中供搜索，后者不会。<br>Symbol.for()不会每次调用就返回一个新的Symbol类型的值，而是会先检查给定的key是否已经存在，如果不存在才会新建一个值。比如，如果你调用Symbol.for(“cat”)30次，每次都会返回同一个Symbol值，但是调用Symbol(“cat”)30次，会返回30个不同的Symbol值。<br>Symbol.keyFor方法返回一个已登记的Symbol类型值的key。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> s1 = <span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">for</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br><span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">keyFor</span>(s1) <span class="hljs-comment">// &quot;foo&quot;</span><br><br><span class="hljs-keyword">var</span> s2 = <span class="hljs-title class_">Symbol</span>(<span class="hljs-string">&quot;foo&quot;</span>);<br><span class="hljs-title class_">Symbol</span>.<span class="hljs-title function_">keyFor</span>(s2); <span class="hljs-comment">// undefined</span><br></code></pre></td></tr></table></figure></li></ul><h3 id="Reflect对象的方法"><a href="#Reflect对象的方法" class="headerlink" title="Reflect对象的方法"></a>Reflect对象的方法</h3><p>Reflect对象的方法清单如下，共14个。</p><p>Reflect.apply(target,thisArg,args)<br>Reflect.construct(target,args)<br>Reflect.get(target,name,receiver)<br>Reflect.set(target,name,value,receiver)<br>Reflect.defineProperty(target,name,desc)<br>Reflect.deleteProperty(target,name)<br>Reflect.has(target,name)<br>Reflect.ownKeys(target)<br>Reflect.enumerate(target)<br>Reflect.isExtensible(target)<br>Reflect.preventExtensions(target)<br>Reflect.getOwnPropertyDescriptor(target, name)<br>Reflect.getPrototypeOf(target)<br>Reflect.setPrototypeOf(target, prototype)</p><h2 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a><span id="扩展5">ES6模块化</span></h2><ul><li>指将一个大的程序文件，拆分成许多小的文件，然后将小文件组合起来</li><li>好处：</li></ul><ol><li>防止命名冲突 </li><li>代码复用 </li><li>高维护性</li></ol><ul><li>ES6之前的模块化：<ul><li>CommonJS =&gt; Node.js</li><li>AMD =&gt; requireJS</li><li>CMD =&gt; sea.JS<br><a href="https://blog.csdn.net/pingqizhendi/article/details/90380952">参考地址</a></li></ul></li><li>ES6模块化语法：由两个命令构成：export 和 import<ul><li>export 用于规定模块的对外接口</li><li>import 用于输入其他模块提供的功能</li></ul></li><li>模块中3种暴露方式：<ol><li>export const xxx = ‘xxx’ 分别暴露 </li><li>export {} 统一暴露 </li><li>export default {} 默认暴露</li></ol></li><li>模块中3种引入方法：<ol><li>import * as m1 from ‘xxx’ 通用引入 </li><li>import {xx, yy} from ‘xxx’ 结构赋值引入，针对分别暴露和统一暴露 </li><li>import m3 from ‘xxx’ 简便引入，针对默认暴露</li></ol></li></ul><h2 id="Proxy和Reflect"><a href="#Proxy和Reflect" class="headerlink" title="Proxy和Reflect"></a><span id="扩展6">Proxy和Reflect</span></h2><p><code>Proxy</code>即代理，可以代理数据（对象/数组/方法）提供13种方法拦截数据（Object.defineProperty只有两种方法）<br><code>Reflect</code>即反射，提供了13种方法反射数据，和Proxy一一对应<br>Proxy构造函数可传入两个参数</p><ul><li>target：目标对象</li><li>handler：具体操作<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">new</span> <span class="hljs-title class_">Proxy</span>(target, &#123;<br>  <span class="hljs-comment">// 针对数据的拦截</span><br>  get set has deleteProperty<br>  <span class="hljs-comment">// 遍历的拦截</span><br>  ownKeys<br>  <span class="hljs-comment">// 属性描述器的拦截</span><br>  getOwnPropertyDescriptor defineOwnProperty<br>  <span class="hljs-comment">// 是否可以扩展</span><br>  isExtensible preventExtensible<br>&#125;)<br></code></pre></td></tr></table></figure></li></ul><h2 id="ES11"><a href="#ES11" class="headerlink" title="ES11"></a><span id="扩展7">ES11</span></h2><p><a href="https://blog.csdn.net/weixin_47077459/article/details/119113454">参考ES6-11笔记</a></p><ol><li><p>私有属性<br>class类里面定义私有属性，不能被实例访问，只能在类的内部用</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>  <span class="hljs-comment">// 私有属性</span><br>  #age<br>  #weight<br>  <span class="hljs-title function_">custructor</span>(<span class="hljs-params">name, age, weight</span>) &#123;<br>    <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br>    <span class="hljs-variable language_">this</span>.#age = age<br>    <span class="hljs-variable language_">this</span>.#weight = weight<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>Promise.allSettled<br>接收一个promise数组参数<br>返回的结果始终是成功的，值是数组里面所有promise执行的结果<br><strong>与Promise.all的区别</strong></p><ul><li>Promise.allSettled始终返回成功，all要数组里大的promise的执行结果全部成功，才会返回成功，否则返回失败</li><li>Promise.allSettled返回数组里面promise的执行结果，all要数组里的promise全部执行成功，才会返回全部的执行结果，否则返回失败的执行结果</li></ul></li><li><p>String.prototype.matchAll</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> reg = <span class="hljs-regexp">/&lt;li&gt;.*?&lt;a&gt;(.*?)&lt;\/a&gt;.*?&lt;p&gt;(.*?)&lt;\/p&gt;/g</span>s<br><span class="hljs-keyword">const</span> result = str.<span class="hljs-title function_">matchAll</span>(reg)  <span class="hljs-comment">// 匹配全部符合reg的字符串，并存入一个数组里</span><br></code></pre></td></tr></table></figure></li><li><p>可选链操作符<br>免去我们去层层判断有没有传入</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">main</span>(<span class="hljs-params">config</span>)&#123;<br>  <span class="hljs-comment">// 之前的写法</span><br>  <span class="hljs-keyword">const</span> dbHost = config &amp;&amp; config.<span class="hljs-property">db</span> &amp;&amp; config.<span class="hljs-property">db</span>.<span class="hljs-property">host</span><br>  <span class="hljs-comment">// 可选链写法</span><br>  <span class="hljs-keyword">const</span> dbHost = config?.<span class="hljs-property">db</span>?.<span class="hljs-property">host</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>动态import<br><code>ES11</code>提供了import函数来进行动态引入，返回值是一个promise对象，成功就返回一个module对象（导出来的module）<br>不在页面加载时import，等要调用的时候在import，不影响加载的效率</p></li><li><p>Bigint<br>大整形 声明：let n = 521n / let n = BigInt(123)<br>可以做大数值运算</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> max = <span class="hljs-title class_">Number</span>.<span class="hljs-property">Max_SAFE_INTEGER</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">BigInt</span>(max) + <span class="hljs-title class_">BigInt</span>(<span class="hljs-number">2</span>)) <span class="hljs-comment">// 大整形只能和大整形运算，不能和原始类型运算</span><br></code></pre></td></tr></table></figure></li><li><p>绝对全局对象globalThis<br>ES11提供了绝对全局对象globalThis始终指向全局，浏览器指向window，Node指向global</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>ES6789</category>
      
      <category>扩展</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6789</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>解构赋值[ES]</title>
    <link href="/ES6789/2022/07/05/index4/"/>
    <url>/ES6789/2022/07/05/index4/</url>
    
    <content type="html"><![CDATA[<p><a href="#%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC1"><code>1.变量的解构赋值</code></a></p><h2 id="变量的解构赋值"><a href="#变量的解构赋值" class="headerlink" title="变量的解构赋值"></a><span id="解构赋值1">变量的解构赋值</span></h2><p><code>解构</code>：<strong>ES6</strong> 中允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p><p><em>开发中比较常见的有<code>对象解构</code>、 <code>数组解构</code>、<code>混合解构</code>。这是一种将数据结构分解为更小的部分的过程，从而达到简化提取信息的目的。</em></p><ul><li><p>数组解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> colors = [ <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span> ]<br><span class="hljs-comment">// 使用解构1</span><br><span class="hljs-keyword">let</span> [ firstColor, secondColor ] = colors<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(firstColor) <span class="hljs-comment">// &#x27;red&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(secondColor) <span class="hljs-comment">// &#x27;green&#x27;</span><br><span class="hljs-comment">// 使用解构2</span><br><span class="hljs-keyword">let</span> [ , , thirdColor ] = colors<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(thirdColor) <span class="hljs-comment">// &#x27;blue&#x27;</span><br><span class="hljs-comment">// 使用解构3</span><br><span class="hljs-keyword">let</span> [ , , ,fourthColor ] = colors<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fourthColor) <span class="hljs-comment">// undefined</span><br><br><span class="hljs-comment">// 使用解构4--ES6中互换值</span><br><span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">2</span>;<br>[ a, b ] = [b, a]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a, b) <span class="hljs-comment">// 2, 1</span><br></code></pre></td></tr></table></figure></li><li><p>嵌套数组解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> colors = [ <span class="hljs-string">&#x27;red&#x27;</span>, [ <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;lightgreen&#x27;</span>] ]<br><span class="hljs-comment">// 使用解构1</span><br><span class="hljs-keyword">let</span> [ firstColor, [ secondColor, thirdColor ] ] = colors<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(firstColor) <span class="hljs-comment">// &#x27;red&#x27;</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(secondColor) <span class="hljs-comment">// green</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(thirdColor) <span class="hljs-comment">// lightgreen</span><br><span class="hljs-comment">// 使用解构2--加默认值</span><br><span class="hljs-keyword">let</span> [ , [ , ], fourthColor = <span class="hljs-string">&#x27;blue&#x27;</span> ] = colors<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(fourthColor) <span class="hljs-comment">// blue</span><br><span class="hljs-comment">// 使用解构3--不定元素</span><br><span class="hljs-keyword">let</span> [ firstColor, ...restColors ] = colors<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(restColors.<span class="hljs-property">length</span>); <span class="hljs-comment">// 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(restColors); <span class="hljs-comment">// [[ &#x27;green&#x27;, &#x27;lightgreen&#x27;]]</span><br><span class="hljs-comment">// 使用解构4---复制</span><br><span class="hljs-keyword">let</span> [ ...copyColors ] = colors<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(copyColors); <span class="hljs-comment">// [ &#x27;red&#x27;, [ &#x27;green&#x27;, &#x27;lightgreen&#x27;] ]</span><br></code></pre></td></tr></table></figure></li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ES5中使用concat进行数组复制</span><br><span class="hljs-keyword">var</span> colors = [ <span class="hljs-string">&quot;red&quot;</span>, <span class="hljs-string">&quot;green&quot;</span>, <span class="hljs-string">&quot;blue&quot;</span> ];<br><span class="hljs-keyword">var</span> clonedColors = colors.<span class="hljs-title function_">concat</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(clonedColors); <span class="hljs-comment">// [red,green,blue]</span><br></code></pre></td></tr></table></figure><ul><li><p>对象解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xxx&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">say</span>: <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;&#125;<br>&#125;<br><span class="hljs-comment">// 传统方法获取对象中的值</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(obj.<span class="hljs-property">name</span>); <span class="hljs-comment">// xxx</span><br><span class="hljs-comment">// 使用解构1</span><br><span class="hljs-keyword">let</span> &#123; name &#125; = obj<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name); <span class="hljs-comment">// xxx</span><br><br><span class="hljs-comment">// 使用解构2---局部变量不存在</span><br><span class="hljs-keyword">let</span> &#123; value &#125; = obj<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value); <span class="hljs-comment">// undefined</span><br><br><span class="hljs-comment">// 使用解构3---默认值</span><br><span class="hljs-keyword">let</span> &#123; value = <span class="hljs-literal">true</span> &#125; = obj<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(value); <span class="hljs-comment">// true</span><br><br><span class="hljs-comment">// 4.使用解构4---指定新的变量名进行解构赋值</span><br><span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">name</span>: newname, <span class="hljs-attr">age</span>: newage &#125; = obj<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(name, age); <span class="hljs-comment">// name is not defined</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newname, newage); <span class="hljs-comment">// xxx 18</span><br><br><span class="hljs-comment">// 5.使用解构5---如果使用let、var、const对对象进行解构时，被解构对象的值不能不存在。不使用var、let、const赋值时，需要将解构语句使用（）进行包裹</span><br>(&#123;type，name&#125; = node);<span class="hljs-comment">//&#123;&#125;在js中作为代码块，单独使用加等号会报错会报错</span><br></code></pre></td></tr></table></figure></li><li><p>嵌套对象解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">const</span> obj = &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;xxx&#x27;</span>,<br>  <span class="hljs-attr">age</span>: <span class="hljs-number">18</span>,<br>  <span class="hljs-attr">loc</span>: &#123;<br>    <span class="hljs-attr">start</span>: &#123;<br>      <span class="hljs-attr">line</span>: <span class="hljs-number">1</span>,<br>      <span class="hljs-attr">column</span>: <span class="hljs-number">1</span><br>    &#125;,<br>    <span class="hljs-attr">end</span>: &#123;<br>      <span class="hljs-attr">line</span>: <span class="hljs-number">2</span>,<br>      <span class="hljs-attr">column</span>: <span class="hljs-number">4</span><br>    &#125;<br>  &#125;<br>&#125;<br><span class="hljs-comment">// 1.第一层解构</span><br><span class="hljs-keyword">let</span> &#123; name, age &#125; = obj;<br><span class="hljs-comment">// 2.第二层解构</span><br><span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">loc</span>: &#123; start &#125;&#125; = obj<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(start); <span class="hljs-comment">// &#123;line: 1, column: 1&#125;</span><br><span class="hljs-comment">// 3.指定新的变量名进行解构赋值</span><br><span class="hljs-keyword">let</span> &#123; <span class="hljs-attr">loc</span>: &#123;<span class="hljs-attr">start</span>: newStart &#125;&#125; = obj<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newStart) <span class="hljs-comment">// &#123;line: 1, column: 1&#125;</span><br></code></pre></td></tr></table></figure></li><li><p>混合解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> err = &#123;<br>  <span class="hljs-attr">errors</span>: [<br>    &#123;<br>      <span class="hljs-attr">msg</span>: <span class="hljs-string">&#x27;this is a message&#x27;</span><br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">title</span>: <span class="hljs-string">&#x27;this is a title&#x27;</span><br>    &#125;<br>  ]<br>&#125;<br><span class="hljs-comment">// 使用解构1</span><br><span class="hljs-keyword">let</span> &#123; errors &#125; = err<br><span class="hljs-keyword">let</span> [ firstArr ] = errors<br><span class="hljs-keyword">let</span> &#123; msg &#125; = firstArr<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg) <span class="hljs-comment">// &#x27;this is a message&#x27;</span><br><span class="hljs-comment">// 使用解构2</span><br><span class="hljs-keyword">let</span> [ , &#123; title &#125;] = err.<span class="hljs-property">errors</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(title) <span class="hljs-comment">// &#x27;this is a title&#x27;</span><br><span class="hljs-keyword">let</span> [&#123; msg &#125;] = err.<span class="hljs-property">errors</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(msg) <span class="hljs-comment">// &#x27;this is a message&#x27;</span><br></code></pre></td></tr></table></figure><p>实际使用- 参数解构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// options 上的属性表示附加参数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setCookie</span>(<span class="hljs-params">name, value, options</span>) &#123;<br>  options = options || &#123;&#125;;<br>  <span class="hljs-keyword">let</span> secure = options.<span class="hljs-property">secure</span>,<br>  path = options.<span class="hljs-property">path</span>,<br>  domain = options.<span class="hljs-property">domain</span>,<br>  expires = options.<span class="hljs-property">expires</span>;<br>  <span class="hljs-comment">// 设置 cookie 的代码</span><br>&#125;<br><span class="hljs-comment">//可以改写为：对options进行解构并赋予默认值</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">setCookie</span>(<span class="hljs-params">name, value, &#123; secure, path, domain, expires &#125; = &#123;&#125;</span>) &#123;<br><span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>ES6789</category>
      
      <category>解构赋值</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6789</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>模板字符串[ES]</title>
    <link href="/ES6789/2022/07/05/index3/"/>
    <url>/ES6789/2022/07/05/index3/</url>
    
    <content type="html"><![CDATA[<!-- [`1.xxx`](#模板字符串1)## <span id="模板字符串1"></span> --><p>新的字符串方式，用``声明<br>特性：</p><ol><li>内容中可以直接出现换行符 </li><li>用${}直接进行变量拼接<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">let</span> name = <span class="hljs-string">&#x27;xxx&#x27;</span><br><span class="hljs-keyword">let</span> age = <span class="hljs-number">18</span><br><span class="hljs-keyword">let</span> str = <span class="hljs-string">`姓名：<span class="hljs-subst">$&#123;name&#125;</span></span><br><span class="hljs-string">年龄：<span class="hljs-subst">$&#123;age&#125;</span>`</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(str)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>ES6789</category>
      
      <category>模板字符串</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6789</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>箭头函数[ES]</title>
    <link href="/ES6789/2022/07/05/index2/"/>
    <url>/ES6789/2022/07/05/index2/</url>
    
    <content type="html"><![CDATA[<!-- [`1.xxx`](#箭头函数1)## <span id="箭头函数1">XXX</span> --><p><code>ES6</code>允许使用箭头来定义函数<br>特性：</p><ol><li>this是静态的，始终指向函数声明式所在的作用域下的this值 </li><li>不能作为构造函数实例化对象</li></ol><ul><li>适用场景：与this无关的回调，定时器，数组的方法回调</li><li>不适用场景：与this有关的回调，事件回调，对象的方法</li></ul>]]></content>
    
    
    <categories>
      
      <category>ES6789</category>
      
      <category>箭头函数</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6789</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>变量和常量[ES]</title>
    <link href="/ES6789/2022/07/05/index1/"/>
    <url>/ES6789/2022/07/05/index1/</url>
    
    <content type="html"><![CDATA[<p><a href="#%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F1"><code>1.区别</code></a></p><h2 id="区别"><a href="#区别" class="headerlink" title="区别"></a><span id="变量和常量1">区别</span></h2><p><strong>ES6</strong><br><strong>let: 声明变量</strong><br>特点：</p><ul><li>只能声明一次，即不可重复声明</li><li>不会变量提升，即在变量声明之前不能够调用</li><li>块级作用域，只能在对应的代码块中使用</li></ul><p><strong>const：声明常量</strong><br>特点：</p><ul><li>只能声明一次，即不能重复声明</li><li>不会变量提升，即在变量声明之前不能够调用</li><li>块级作用域，只能在对应的代码块中使用</li><li>一定要有初始值，即const声明的变量在声明的时候必须赋值，且只能赋值一次</li><li>对于数组或者对象的修改不算对常量的修改，不会报错</li></ul>]]></content>
    
    
    <categories>
      
      <category>ES6789</category>
      
      <category>变量和常量</category>
      
    </categories>
    
    
    <tags>
      
      <tag>ES6789</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>正则表达式[JS基础]</title>
    <link href="/JavaScript_basic/2022/06/30/index7/"/>
    <url>/JavaScript_basic/2022/06/30/index7/</url>
    
    <content type="html"><![CDATA[<!-- # XXX --><p><a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F1"><code>1.简介</code></a> <a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F2"><code>2.使用</code></a> <a href="#%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F3"><code>3.示例</code></a></p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a><span id="正则表达式1">简介</span></h2><p>正则表达式（英语：Regular Expression，在代码中常简写为regex、regexp或RE）使用单个字符串来描述、匹配一系列符合某个句法规则的字符串搜索模式。<br>搜索模式可用于文本搜索和文本替换。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 语法</span><br>/正则表达式主体/修饰符(可选)<br></code></pre></td></tr></table></figure><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a><span id="正则表达式2">使用</span></h2><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>在 JavaScript 中，正则表达式通常用于两个字符串方法 : search() 和 replace()；字符串检测方法：test() 和 exec()。</p><ul><li>search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串，并返回子串的起始位置。</li><li>replace() 方法用于在字符串中用一些字符串替换另一些字符串，或替换一个与正则表达式匹配的子串。</li><li>test()方法用于检测一个字符串是否匹配某个正则表达式模式，匹配为true，否则为false。</li><li>exec()方法用于检索字符串中的正则表达式的匹配，该函数返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</li></ul><h3 id="正则表达式修饰符"><a href="#正则表达式修饰符" class="headerlink" title="正则表达式修饰符"></a>正则表达式修饰符</h3><p><code>修饰符</code>可以在全局搜索中不区分大小写</p><table><thead><tr><th align="left">修饰符</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">i</td><td align="left">忽略大小写</td></tr><tr><td align="left">g</td><td align="left">全局搜索</td></tr><tr><td align="left">m</td><td align="left">多行模式</td></tr><tr><td align="left">s</td><td align="left">包含换行符</td></tr></tbody></table><table><thead><tr><th align="left">语法参考</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">.</td><td align="left">除换行符以外的所有字符。</td></tr><tr><td align="left">^</td><td align="left">字符串开头。</td></tr><tr><td align="left">$</td><td align="left">字符串结尾。</td></tr><tr><td align="left">\d,\w,\s</td><td align="left">匹配数字、字符、空格。</td></tr><tr><td align="left">\D,\W,\S</td><td align="left">匹配非数字、非字符、非空格。</td></tr><tr><td align="left">[abc]</td><td align="left">匹配 a、b 或 c 中的一个字母。</td></tr><tr><td align="left">[a-z]</td><td align="left">匹配 a 到 z 中的一个字母。</td></tr><tr><td align="left">[^abc]</td><td align="left">匹配除了 a、b 或 c 中的其他字母。</td></tr><tr><td align="left">aa</td><td align="left">bb</td></tr><tr><td align="left">?</td><td align="left">0 次或 1 次匹配。</td></tr><tr><td align="left">*</td><td align="left">匹配 0 次或多次。</td></tr><tr><td align="left">+</td><td align="left">匹配 1 次或多次。</td></tr><tr><td align="left">{n}</td><td align="left">匹配 n次。</td></tr><tr><td align="left">{n,}</td><td align="left">匹配 n次以上。</td></tr><tr><td align="left">{m,n}</td><td align="left">最少 m 次，最多 n 次匹配。</td></tr><tr><td align="left">(expr)</td><td align="left">捕获 expr 子模式,以 \1 使用它。</td></tr><tr><td align="left">(?:expr)</td><td align="left">忽略捕获的子模式。</td></tr><tr><td align="left">(?=expr)</td><td align="left">正向预查模式 expr。</td></tr><tr><td align="left">(?!expr)</td><td align="left">负向预查模式 expr。</td></tr></tbody></table><h3 id="使用-RegExp-对象"><a href="#使用-RegExp-对象" class="headerlink" title="使用 RegExp 对象"></a>使用 RegExp 对象</h3><p>在 JavaScript 中，<code>RegExp</code> 对象是一个预定义了属性和方法的正则表达式对象。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a><span id="正则表达式3">示例</span></h2><p><a href="https://c.runoob.com/front-end/854/">正则表达式在线测试工具</a></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript基础</category>
      
      <category>正则表达式</category>
      
    </categories>
    
    
    <tags>
      
      <tag>正则表达式</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>面向对向的知识[JS基础]</title>
    <link href="/JavaScript_basic/2022/06/30/index6/"/>
    <url>/JavaScript_basic/2022/06/30/index6/</url>
    
    <content type="html"><![CDATA[<p><strong>文章目录</strong></p><ol><li><a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%861">对象的定义</a></li><li><a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%862">js的对象分类</a></li><li>typeof 与 instanceof 的应用</li><li>1 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%863">typeof</a></li><li>2 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%864">instanceof</a></li><li>属性的操作</li><li>1 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%866">访问某个属性</a></li><li>2 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%867">给对象添加属性</a></li><li>3 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%868">获取全部可以枚举的实例属性</a></li><li>利用属性的特性，完成例子</li><li>1 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%869">数组去重</a></li><li>2 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%8610">统计数组中个元素出现次数</a></li><li>原型与原型链</li><li>1 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%8611">原型</a></li><li>2 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%8612">原型链</a></li><li>this 的应用</li><li>1 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%8613">如何确定this的值</a></li><li>2 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%865">this 的总结</a></li><li>3 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%8614">call,apply与bind可以改变this的指向</a></li><li>创建对象的N种方式</li><li>1 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%8615">字面量方式</a></li><li>2 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%8616">工厂模式</a></li><li>3 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%8617">构造器模式（使用new）</a></li><li>4 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%8618">构造器 + 原型 模式</a></li><li>继承</li><li>1 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%8619">原型继承</a></li><li>2 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%8620">继承的浅拷贝</a></li><li>3 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%8621">继承的深拷贝</a><br>10 class的应用</li><li>1 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%8622">使用css创建对象</a></li><li>2 <a href="#%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E7%9F%A5%E8%AF%8623">使用extends实现继承</a></li></ol><h2 id="对象的定义"><a href="#对象的定义" class="headerlink" title="对象的定义"></a><span id="面向对象的知识1">对象的定义</span></h2><p>对象是无序属性集合</p><h2 id="js的对象分类"><a href="#js的对象分类" class="headerlink" title="js的对象分类"></a><span id="面向对象的知识2">js的对象分类</span></h2><ul><li>内置对象<ul><li>本地对象：Object、Array、String、Number、Boolean、Date、Error···</li><li>单体内置对象：只有Global、Math</li><li>两者的区别：单体内置对象不需要加new</li></ul></li><li>宿主对象<ul><li>js寄宿环境定义的对象：window、document、history</li></ul></li><li>自定义对象</li></ul><h2 id="typeof-与-instanceof-的应用"><a href="#typeof-与-instanceof-的应用" class="headerlink" title="typeof 与 instanceof 的应用"></a>typeof 与 instanceof 的应用</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a><span id="面向对象的知识3">typeof</span></h3><p>功能：输出数据所属的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 格式</span><br><span class="hljs-keyword">typeof</span> 数据<br></code></pre></td></tr></table></figure><h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a><span id="面向对象的知识4">instanceof</span></h3><p>功能：查看数据是否是指定的类型</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 格式</span><br>要判断的数据 <span class="hljs-keyword">instanceof</span> 类型<br></code></pre></td></tr></table></figure><h2 id="属性的操作"><a href="#属性的操作" class="headerlink" title="属性的操作"></a>属性的操作</h2><h3 id="访问某个属性"><a href="#访问某个属性" class="headerlink" title="访问某个属性"></a><span id="面向对象的知识6">访问某个属性</span></h3><p>方式一：对象名.属性<br>方式二：对象名[属性]<br>注意：如果属性名被保存在某一个变量，只能使用第二种方式。</p><h3 id="给对象添加属性"><a href="#给对象添加属性" class="headerlink" title="给对象添加属性"></a><span id="面向对象的知识7">给对象添加属性</span></h3><p>方式一：对象名.属性名　＝　属性值；<br>方式二：对象名[“属性名”] = 属性值；</p><ul><li>属性有四个特征<ul><li>configurable：是否可以删除。默认为true。</li><li>writable：是否可以修改属性的值。默认为true。</li><li>enumerable：是否可以修改属性的值。默认为true。</li><li>value：值。默认为undefined</li></ul></li><li><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 精细设置对象的属性--格式</span><br><span class="hljs-title class_">Object</span>.<span class="hljs-title function_">defineProperty</span>(对象名，“属性名”，&#123;<br><span class="hljs-title class_">Configurable</span>:<br><span class="hljs-title class_">Writable</span>:<br><span class="hljs-title class_">Enumerable</span>:<br><span class="hljs-title class_">Value</span>:<br>&#125;)<br></code></pre></td></tr></table></figure><h3 id="获取全部可以枚举的实例属性"><a href="#获取全部可以枚举的实例属性" class="headerlink" title="获取全部可以枚举的实例属性"></a><span id="面向对象的知识8">获取全部可以枚举的实例属性</span></h3>Object.keys();</li></ul><h2 id="利用属性的特性，完成例子"><a href="#利用属性的特性，完成例子" class="headerlink" title="利用属性的特性，完成例子"></a>利用属性的特性，完成例子</h2><h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a><span id="面向对象的知识9">数组去重</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// ES6 new Set去重</span><br><span class="hljs-comment">// Set是es6新增的数据结构，似于数组，但它的一大特性就是所有元素都是唯一的，没有重复的值，我们一般称为集合。</span><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">24</span>,<span class="hljs-number">3</span>,<span class="hljs-number">24</span>,<span class="hljs-number">35</span>,<span class="hljs-number">32</span>,<span class="hljs-number">56</span>,<span class="hljs-number">23</span>,<span class="hljs-number">6</span>,<span class="hljs-number">24</span>,<span class="hljs-number">6</span>,<span class="hljs-number">24</span>,<span class="hljs-number">6</span>,<span class="hljs-number">3</span>]<br><span class="hljs-keyword">const</span> newArr = [...<span class="hljs-keyword">new</span> <span class="hljs-title class_">Set</span>(arr)];<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(newArr)<br></code></pre></td></tr></table></figure><h3 id="统计数组中元素出现次数"><a href="#统计数组中元素出现次数" class="headerlink" title="统计数组中元素出现次数"></a><span id="面向对象的知识10">统计数组中元素出现次数</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// hasOwnProperty(propertyName)方法 是用来检测属性是否为对象的自有属性，如果是，返回true，否者false; 参数propertyName指要检测的属性名；</span><br><span class="hljs-comment">// 用法：object.hasOwnProperty(propertyName) // true/false</span><br><span class="hljs-keyword">let</span> arr = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> obj = &#123;&#125;;<br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;arr.<span class="hljs-property">length</span>;i++)&#123;<br>    <span class="hljs-keyword">let</span> t = arr[i];<br>    <span class="hljs-keyword">if</span>(obj.<span class="hljs-title function_">hasOwnProperty</span>(t))&#123;<br>        obj[t] += <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        obj[t] = <span class="hljs-number">1</span>;<br>    &#125;   <br>&#125;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&#x27;obj :&#x27;</span>, obj);<br></code></pre></td></tr></table></figure><h2 id="原型与原型链"><a href="#原型与原型链" class="headerlink" title="原型与原型链"></a>原型与原型链</h2><h3 id="原型"><a href="#原型" class="headerlink" title="原型"></a><span id="面向对象的知识11">原型</span></h3><p><code>prototype</code>: 原型</p><ol><li>每一个函数都有一个prototype属性</li><li>函数的原型是一个对象，原型里面不一定有很多方法，但是一定有constructor方法</li><li>constructor指向这个函数本身<br><img src="../../../../../../images/%E5%8E%9F%E5%9E%8B.png" alt="原型"><br><code>proto</code>: 隐式原型，它对外是隐藏的，我们在程序开发过程，不会直接使用它。</li><li>每一个对象都有一个__proto__属性</li><li>对于函数而言，每一个函数都会有一个prototype和一个__proto__属性。<br>注：对象的__proto__属性　指向　创建这个对象的函数的prototype</li></ol><h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a><span id="面向对象的知识12">原型链</span></h3><p><code>原型链</code>：访问一个对象的属性时，先在这个对象自己的属性中去找，如果找不到，则沿着__proto__这个属性向中找，如果__proto__这个对象中还是没有找到，就在__proto__对象的__proto__属性中去找，依次下去，这就是原型链。</p><p>`注意：</p><ul><li>由于对象的__proto__[隐式原型]与创建这个对象的函数（构造器）的prototype是一致的。</li><li>所以理论上，你对__proto__修改会直接影响prototype。</li><li>建议只使用prototype[原型]`</li></ul><h2 id="this-的应用"><a href="#this-的应用" class="headerlink" title="this 的应用"></a>this 的应用</h2><h3 id="如何确定this的值"><a href="#如何确定this的值" class="headerlink" title="如何确定this的值"></a><span id="面向对象的知识13">如何确定this的值</span></h3><p>看方法前的那个对象是谁，this就指向谁。</p><ol><li> 有明确的对象<br>例如：Obj.say();say 的当前对象是obj，所以say中的this 就指向obj。</li><li>没有明确的对象<br>如果这个函数没有明确说是哪个对象的，则它肯定是属于window对象的，所以this就会指向window.</li><li>如果是call和apply的方式，这时，this指向第一个参数<br>例如：f.call(obj1)，f中的this指向obj1。</li></ol><h3 id="this的总结"><a href="#this的总结" class="headerlink" title="this的总结"></a><span id="面向对象的知识5">this的总结</span></h3><ol><li>this出现在全局中，this是window</li><li>this出现在一个普通的函数中（不是方法），this是window</li><li>this出现在一个对象的方法，this可以是这个对象，也可以是window</li><li>call和apply可以改变this指向，指向()第一个参数</li><li>一个函数没有明确指出谁调了，this是window</li></ol><h3 id="call-apply与bind可以改变this的指向"><a href="#call-apply与bind可以改变this的指向" class="headerlink" title="call,apply与bind可以改变this的指向"></a><span id="面向对象的知识14">call,apply与bind可以改变this的指向</span></h3><p><a href="https://www.runoob.com/w3cnote/js-call-apply-bind.html">call,apply与bind的应用</a></p><h2 id="创建对象的N种方式"><a href="#创建对象的N种方式" class="headerlink" title="创建对象的N种方式"></a>创建对象的N种方式</h2><h3 id="字面量方式"><a href="#字面量方式" class="headerlink" title="字面量方式"></a><span id="面向对象的知识15">字面量方式</span></h3><p>其实就是直接写常量，只是这个常量是一个对象。</p><ul><li>优点：直接了当，一目了然</li><li>缺点：不能批量生产对象，只能一个一个写</li></ul><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a><span id="面向对象的知识16">工厂模式</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 利用工厂模式创建对象   工厂利用一个函数来模拟</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">factory</span>(<span class="hljs-params">w,h</span>)&#123;<br>  <span class="hljs-comment">// 批量地产生矩形对象</span><br>  <span class="hljs-keyword">let</span> obj = &#123;&#125;<br>  obj.<span class="hljs-property">width</span> = w;<br>  obj.<span class="hljs-property">height</span> = h;<br>  obj.<span class="hljs-property">getC</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">width</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span>)*<span class="hljs-number">2</span><br>  &#125;<br>  obj.<span class="hljs-property">getS</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">width</span>*<span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span><br>  &#125;<br>  <span class="hljs-keyword">return</span> obj;<br>&#125;<br><span class="hljs-keyword">let</span> r1 = <span class="hljs-title function_">factory</span>(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><span class="hljs-keyword">let</span> r2 = <span class="hljs-title function_">factory</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>)<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r1.<span class="hljs-title function_">getC</span>()) <span class="hljs-comment">// 6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r1.<span class="hljs-title function_">getS</span>())  <span class="hljs-comment">// 2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r2.<span class="hljs-title function_">getC</span>()) <span class="hljs-comment">// 10</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r2.<span class="hljs-title function_">getS</span>()) <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><ul><li>优点：主要解决了字面量方式的不能批量生产对象的问题。</li><li>缺点：他产生的对象没有“商标”（不知道是谁生产的）</li></ul><h3 id="构造器模式（使用new）"><a href="#构造器模式（使用new）" class="headerlink" title="构造器模式（使用new）"></a><span id="面向对象的知识17">构造器模式（使用new）</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Rect</span>(<span class="hljs-params">w,h</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">width</span> = w;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span> = h;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">getC</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">width</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span>)*<span class="hljs-number">2</span><br>  &#125;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">getS</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">width</span>*<span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span><br>  &#125;<br>&#125;<br><span class="hljs-keyword">var</span> r1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rect</span>(<span class="hljs-number">20</span>,<span class="hljs-number">10</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r1.<span class="hljs-title function_">getS</span>());<br><br><span class="hljs-keyword">var</span> r2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rect</span>(<span class="hljs-number">20</span>,<span class="hljs-number">20</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r2.<span class="hljs-title function_">getS</span>());<br><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r1.<span class="hljs-property">constructor</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r2.<span class="hljs-property">constructor</span>);<br><br></code></pre></td></tr></table></figure><p>构造器模式优点：</p><ul><li>解决了对象的来源不明的问题。我们可以通过对象的constructor属性，找到它的构造器。</li><li>new 构造器（） 这种格式会受面向对象的程序员（java,C#,C++…）所接受。</li><li>具备工厂模式的批量生产（还可以是定制的，例如传参不同） 。</li><li>构造器模式缺点：不能像数组一组，共用方法。内存浪费。</li></ul><h3 id="构造器-原型模式"><a href="#构造器-原型模式" class="headerlink" title="构造器+原型模式"></a><span id="面向对象的知识18">构造器+原型模式</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Rect</span>(<span class="hljs-params">w, h</span>) &#123;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">width</span> = w;<br>  <span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span> = h;<br>&#125;<br><span class="hljs-title class_">Rect</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getC</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> (<span class="hljs-variable language_">this</span>.<span class="hljs-property">width</span>+<span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span>)*<span class="hljs-number">2</span><br>&#125;<br><span class="hljs-title class_">Rect</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">getS</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>)&#123;<br>  <span class="hljs-keyword">return</span> <span class="hljs-variable language_">this</span>.<span class="hljs-property">width</span>*<span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span><br>&#125;<br><span class="hljs-comment">// r1  r2都有getC和getS  造成内存空间的浪费</span><br><span class="hljs-keyword">let</span> r1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rect</span>(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><span class="hljs-keyword">let</span> r2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Rect</span>(<span class="hljs-number">2</span>, <span class="hljs-number">3</span>);<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r1.<span class="hljs-title function_">getC</span>()) <span class="hljs-comment">// 6</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r1.<span class="hljs-title function_">getS</span>())  <span class="hljs-comment">// 2</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r2.<span class="hljs-title function_">getC</span>()) <span class="hljs-comment">// 10</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(r2.<span class="hljs-title function_">getS</span>()) <span class="hljs-comment">// 6</span><br></code></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a><span id="面向对象的知识19">原型继承</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">function</span> <span class="hljs-title function_">Parent</span>(<span class="hljs-params">yourname</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = yourname;<br>&#125;<br><span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">say</span> = <span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span>)<br>&#125;<br><br><span class="hljs-comment">// 让Son去继承name属性和say方法</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">Son</span>(<span class="hljs-params">yourname</span>) &#123;<br><span class="hljs-comment">// 继承属性</span><br><span class="hljs-title class_">Parent</span>.<span class="hljs-title function_">call</span>(<span class="hljs-variable language_">this</span>,yourname)<br>&#125;<br><br><span class="hljs-comment">// 继承方法</span><br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Son</span>;<br><br><span class="hljs-comment">//调用</span><br><span class="hljs-keyword">let</span> s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Son</span>(<span class="hljs-string">&quot;hrllo&quot;</span>);<br>s.<span class="hljs-title function_">say</span>();<br></code></pre></td></tr></table></figure><h3 id="继承的浅拷贝"><a href="#继承的浅拷贝" class="headerlink" title="继承的浅拷贝"></a><span id="面向对象的知识20">继承的浅拷贝</span></h3><p><code>浅拷贝</code>: 将父类的原型对象直接复制给子类的原型对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span> = <span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>;<br><span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>.<span class="hljs-property">constructor</span> = <span class="hljs-title class_">Son</span>;<br></code></pre></td></tr></table></figure><p>注：若有多个对象，多个对象指向同一个原型对象，parent肯定会存在干扰</p><h3 id="继承的深拷贝"><a href="#继承的深拷贝" class="headerlink" title="继承的深拷贝"></a><span id="面向对象的知识21">继承的深拷贝</span></h3><p><code>深拷贝</code>: 把原型对象copy一份 让Son继承copy过来的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">for</span>(<span class="hljs-keyword">let</span> i <span class="hljs-keyword">in</span> <span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>)&#123;<br>  <span class="hljs-title class_">Son</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[i] = <span class="hljs-title class_">Parent</span>.<span class="hljs-property"><span class="hljs-keyword">prototype</span></span>[i]<br>&#125;<br></code></pre></td></tr></table></figure><p>注：每个对象各自独立，不存在干扰的现象</p><h2 id="class的应用"><a href="#class的应用" class="headerlink" title="class的应用"></a>class的应用</h2><h3 id="使用css创建对象"><a href="#使用css创建对象" class="headerlink" title="使用css创建对象"></a><span id="面向对象的知识22">使用css创建对象</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 格式</span><br><span class="hljs-keyword">class</span> 类名&#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">参数</span>)&#123;<br><span class="hljs-variable language_">this</span>.属性= 参数;<br>&#125;<br><span class="hljs-title function_">method</span>(<span class="hljs-params"></span>)&#123;<span class="hljs-comment">//对象中简写方法，省略了function。不要与箭头函数搞混了。</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>class是关键字，后面紧跟类名，类名<code>首字母大写</code>，采取的是<code>大驼峰命名法则</code>。类名之后是{}。</li><li>在{}中，不能直接写语句，只能写方法，方法不需要使用关键字</li><li>方法和方法之间没有逗号。不是键值对。<br>调用方式:<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">var</span> p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NBAPlayer</span>(<span class="hljs-string">&quot;库里&quot;</span>,<span class="hljs-string">&quot;30&quot;</span>,<span class="hljs-string">&quot;191&quot;</span>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="使用extends实现继承"><a href="#使用extends实现继承" class="headerlink" title="使用extends实现继承"></a><span id="面向对象的知识23">使用extends实现继承</span></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> 子类 <span class="hljs-keyword">extends</span> 父类&#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">参数</span>)&#123;<br>    <span class="hljs-variable language_">super</span>(参数)<br><span class="hljs-variable language_">this</span>.属性 = 值<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：</p><ul><li>使用extends关键字来实现继承</li><li>在子类中的构造器constructor中，必须要显式调用父类的super方法，如果不调用，则this不可用<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">class</span> <span class="hljs-title class_">NBAPlayer</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age, height</span>) &#123;<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">height</span> = height<br>&#125;<br><span class="hljs-title function_">say</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`我是<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>,今年<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.age&#125;</span>,我的身高是<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.height&#125;</span>`</span>)<br>&#125;<br><span class="hljs-title function_">jump</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">&quot;jump...&quot;</span>)<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MVP</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_ inherited__">NBAPlayer</span> &#123;<br><span class="hljs-title function_">constructor</span>(<span class="hljs-params">name, age, height, year</span>) &#123;<br><span class="hljs-variable language_">super</span>(name, age, height)<br><span class="hljs-variable language_">this</span>.<span class="hljs-property">year</span> = year;<br>&#125;<br><span class="hljs-title function_">showMVP</span>(<span class="hljs-params"></span>) &#123;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-string">`我是<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.name&#125;</span>,我是<span class="hljs-subst">$&#123;<span class="hljs-variable language_">this</span>.year&#125;</span>年的MVP`</span>)<br>&#125;<br>&#125;<br><span class="hljs-keyword">var</span> m1 = <span class="hljs-keyword">new</span> <span class="hljs-title function_">MVP</span>(<span class="hljs-string">&quot;xiaoqiang&quot;</span>,<span class="hljs-string">&quot;33&quot;</span>,<span class="hljs-string">&quot;191&quot;</span>,<span class="hljs-number">2010</span>)<br>m1.<span class="hljs-title function_">say</span>()<br>m1.<span class="hljs-title function_">showMVP</span>()<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>JavaScript基础</category>
      
      <category>面向对象的知识</category>
      
    </categories>
    
    
    <tags>
      
      <tag>面向对象的知识</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DOM、BOM[JS基础]</title>
    <link href="/JavaScript_basic/2022/06/30/index5/"/>
    <url>/JavaScript_basic/2022/06/30/index5/</url>
    
    <content type="html"><![CDATA[<!-- # XXX --><p><a href="#BOMDOM1"><code>1.BOM与DOM区别1</code></a> <a href="#BOMDOM2"><code>1.BOM与DOM区别2</code></a> <a href="#BOMDOM3"><code>1.BOM与DOM区别3</code></a></p><h2 id="BOM与DOM区别1"><a href="#BOM与DOM区别1" class="headerlink" title="BOM与DOM区别1"></a><span id="BOMDOM1">BOM与DOM区别1</span></h2><ul><li>BOM是Browser Object Model的缩写，即<code>浏览器对象模型</code>。</li><li>DOM是Document Object Model的缩写，即<code>文档对象模型</code>。</li></ul><h2 id="BOM与DOM区别2"><a href="#BOM与DOM区别2" class="headerlink" title="BOM与DOM区别2"></a><span id="BOMDOM2">BOM与DOM区别2</span></h2><ul><li>BOM没有相关标准。会考虑到浏览器兼容性问题。</li><li>DOM是W3C的标准。</li></ul><h2 id="BOM与DOM区别3"><a href="#BOM与DOM区别3" class="headerlink" title="BOM与DOM区别3"></a><span id="BOMDOM3">BOM与DOM区别3</span></h2><ul><li>BOM的最根本对象是window。</li><li>DOM最根本对象是document（实际上是window.document）。</li></ul><p>注意：</p><ul><li>虽然BOM没有一套标准，但是各个浏览器的常用功能的JavaScript代码还是大同小异的，对于常用的功能实际上已经有默认的标准了。所以不用过于担心浏览器兼容问题，不是每个浏览器都有自己的BOM，也不需要为每个浏览器都学习一套BOM，只是个别浏览器会有新增的功能会在BOM上体现出来。</li><li>我们知道HTML是由标签组成的，标签套标签。JavaScript可以通过DOM获取到底有哪些标签，标签里面的属性是什么，内容是什么等。</li></ul><p><img src="../../../../../../images/js%E7%BB%84%E6%88%90.png" alt="js组成"></p><blockquote><p>ECMAscript<br>ECMAScript 是一种由 ECMA国际（前身为欧洲计算机制造商协会）通过 ECMA-262 标准化的脚本程序设计语言，它是JavaScript（简称JS）的标准，浏览器就是去执行这个标准。</p></blockquote><blockquote><p>DOM<br>DOM（Document Object Model ，文档对象模型）一种独立于语言，用于操作xml，html文档的应用编程接口。<br>对于JavaScript：为了能够使JavaScript操作Html，JavaScript就有了一套自己的DOM编程接口。<br>一句话概括：<code>DOM为JavaScript提供了一种访问和操作HTML元素的&quot;方法&quot;</code></p></blockquote><blockquote><p>BOM<br>BOM 是 Browser Object Model，浏览器对象模型。BOM 是为了控制浏览器的行为而出现的接口。<br>对于JavaScript：为了能够让JavaScript能控制浏览器的行为，JavaScript就有了一套自己的BOM接口。<br>一句话概括：<code>BOM为JavaScript提供了一种控制浏览器行为的&quot;方法&quot;。</code></p></blockquote><ul><li><p><strong>DOM常见操作元素方法</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 获取节点的DOM方法</span><br><span class="hljs-comment">//1.通过元素的id属性值来获取元素，返回的是一个元素对象</span><br><span class="hljs-keyword">var</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(id_content)<br><span class="hljs-comment">//2.通过元素的name属性值来获取元素，返回的是一个元素对象的数组</span><br><span class="hljs-keyword">var</span> element_list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByName</span>(name_content)<br><span class="hljs-comment">//3.通过元素的class属性值来获取元素，返回的是一个元素对象的数组</span><br><span class="hljs-keyword">var</span> element_list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByClassName</span>(class_content)<br><span class="hljs-comment">//4.通过标签名获取元素，返回的是一个元素对象数组</span><br><span class="hljs-keyword">var</span> element_list = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementsByTagName</span>(tagName)<br><br><span class="hljs-comment">// 获取/设置元素的属性值的DOM方法</span><br><span class="hljs-comment">//1.获取元素的属性值，传参自然地是属性名，例如class、id、href</span><br><span class="hljs-keyword">var</span> attr = element.<span class="hljs-title function_">getAttribute</span>(attribute_name)<br><span class="hljs-comment">//2.设置元素的属性值，传参自然地是元素的属性名及要设置的对应的属性值</span><br>element.<span class="hljs-title function_">setAttribute</span>(attribute_name,attribute_value)<br><br><span class="hljs-comment">// 创建节点(Node)的DOM方法</span><br><span class="hljs-comment">//1.创建一个html的元素，传参是元素类型，例如p、h1-5、a，下以p为例</span><br><span class="hljs-keyword">var</span> element = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createElement</span>(<span class="hljs-string">&quot;p&quot;</span>)<br><span class="hljs-comment">//2.创建一个文本节点，传参的是对应的文本内容(注意是文本节点，不是某个html元素)</span><br><span class="hljs-keyword">var</span> text_node = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createTextNode</span>(text)<br><span class="hljs-comment">//3.创建一个属性节点，传参是对应的属性名</span><br><span class="hljs-keyword">var</span> attr_node = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">createAttribute</span>(attribute_name)<br>element.<span class="hljs-title function_">setAttributeNode</span>(attr_node)<br><br><span class="hljs-comment">// 增添节点的DOM方法</span><br><span class="hljs-comment">//1.向element内部的最后面添加一个节点，传入的参数是节点类型</span><br>element.<span class="hljs-title function_">appendChild</span>(<span class="hljs-title class_">Node</span>)<br><span class="hljs-comment">//2.向element内部某个已存在的节点的前面插入一个节点，仍然传入一个节点类型的参数</span><br>element.<span class="hljs-title function_">insertBefore</span>(new_Node,existed_Node)<br><br><span class="hljs-comment">// 删除节点的DOM方法</span><br><span class="hljs-comment">//删除element内的某个节点，传参是节点类型参数</span><br>element.<span class="hljs-title function_">removeChild</span>(<span class="hljs-title class_">Node</span>)<br></code></pre></td></tr></table></figure></li><li><p><strong>DOM常见的一些属性</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//1.获取当前元素的父节点</span><br><span class="hljs-keyword">var</span> element_father = element.<span class="hljs-property">parentNode</span><br><span class="hljs-comment">//2.获取当前元素的html元素型子节点</span><br><span class="hljs-keyword">var</span> element_son = element.<span class="hljs-property">children</span><br><span class="hljs-comment">//3.获取当前元素的所有类型子节点，包括html元素、文本和属性</span><br><span class="hljs-keyword">var</span> element_son = element.<span class="hljs-property">childNodes</span><br><span class="hljs-comment">//4.获取当前元素的第一个子节点</span><br><span class="hljs-keyword">var</span> element_first = element.<span class="hljs-property">firstChild</span><br><span class="hljs-comment">//5.获取当前元素的前一个同级元素</span><br><span class="hljs-keyword">var</span> element_pre = element.<span class="hljs-property">previousSibling</span><br><span class="hljs-comment">//6.获取当前元素的后一个同级元素</span><br><span class="hljs-keyword">var</span> element_next = element.<span class="hljs-property">nextSibling</span><br><span class="hljs-comment">//7.获取当前元素的所有文本，包括html源码和文本</span><br><span class="hljs-keyword">var</span> element_innerHTML = element.<span class="hljs-property">innerHTML</span><br><span class="hljs-comment">//8.获取当前元素的所有文本，不包含html源码</span><br><span class="hljs-keyword">var</span> element_innerTEXT = element.<span class="hljs-property">innerText</span><br></code></pre></td></tr></table></figure><p>注意：window的所有属性和方法，都可以有两种表示方法：<br>(1) window.属性 / window.方法()<br>(2) 直接属性 / 方法() 的方式调用*</p></li></ul><p>BOM常见对象<br>window对象有以下常见的属性和方法：</p><table><thead><tr><th align="left">属性/方法</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">opener</td><td align="left">当前窗口的父窗口</td></tr><tr><td align="left">length</td><td align="left">窗口中的框架数</td></tr><tr><td align="left">document</td><td align="left">窗口中当前显示的文档对象</td></tr><tr><td align="left">alert(string)</td><td align="left">创建一个警告对话框，显示一条信息</td></tr><tr><td align="left">close()</td><td align="left">关闭窗口</td></tr><tr><td align="left">confirm()</td><td align="left">创建一个需要用户确认的对话框</td></tr><tr><td align="left">open(url,name,[options])</td><td align="left">打开一个新窗口并返回新 window 对象</td></tr><tr><td align="left">prompt(text,defaultInput)</td><td align="left">创建一个对话框要求用户输入信息</td></tr><tr><td align="left">setInterval(expression,milliseconds)</td><td align="left">经过指定时间间隔计算一个表达式</td></tr><tr><td align="left">setInterval(function,millis enconds,[arguments])</td><td align="left">经过指定时间间隔后调用一个函数</td></tr><tr><td align="left">setTimeout(expression,milli seconds)</td><td align="left">在定时器超过后计算一个表达式</td></tr><tr><td align="left">setTimeout(expression,milli seconds,[arguments])</td><td align="left">在定时器超过时后计算一个函数</td></tr></tbody></table><p>location对象有以下常见的属性和方法：</p><table><thead><tr><th align="left">属性/方法</th><th align="left">含义</th></tr></thead><tbody><tr><td align="left">host</td><td align="left">主机名：端口号</td></tr><tr><td align="left">hostname</td><td align="left">主机名</td></tr><tr><td align="left">href</td><td align="left">整个 URL</td></tr><tr><td align="left">pathname</td><td align="left">路径名</td></tr><tr><td align="left">port</td><td align="left">端口号</td></tr><tr><td align="left">protocol</td><td align="left">协议部分</td></tr><tr><td align="left">search</td><td align="left">查询字符串</td></tr><tr><td align="left">reload()</td><td align="left">重载当前 URL</td></tr><tr><td align="left">repalce()</td><td align="left">用新的 URL 替换当前页面</td></tr></tbody></table><p><em>location对象不仅仅是window对象的一个属性，还是document对象的一个属性。<br>window.location = location = document.location</em></p>]]></content>
    
    
    <categories>
      
      <category>JavaScript基础</category>
      
      <category>DOM、BOM</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DOM、BOM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>变量、作用域[JS基础]</title>
    <link href="/JavaScript_basic/2022/06/30/index4/"/>
    <url>/JavaScript_basic/2022/06/30/index4/</url>
    
    <content type="html"><![CDATA[<!-- # XXX --><p><a href="#%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F1"><code>1.函数作用域</code></a> <a href="#%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F2"><code>2.局部JS变量</code></a> <a href="#%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F3"><code>3.全局JS变量</code></a> <a href="#%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F4"><code>4.JS变量</code></a><br><a href="#%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F5"><code>5.自动全局</code></a> <a href="#%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F6"><code>6.严格模式</code></a> <a href="#%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F7"><code>7.HTML 中的全局变量</code></a><a href="#%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F8"><code>8.警告</code></a><br><a href="#%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F9"><code>9.JS 变量的有效期</code></a> <a href="#%E5%8F%98%E9%87%8F%E4%BD%9C%E7%94%A8%E5%9F%9F10"><code>10.函数参数</code></a></p><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a><span id="变量作用域1">函数作用域</span></h2><p>在 JavaScript 中有两种作用域类型：</p><ul><li>局部作用域</li><li>全局作用域<br>JavaScript 拥有函数作用域：每个函数创建一个新的作用域。<br>作用域决定了这些变量的可访问性（可见性）。<br>函数内部定义的变量从函数外部是不可访问的（不可见的）。</li></ul><h2 id="局部JS变量"><a href="#局部JS变量" class="headerlink" title="局部JS变量"></a><span id="变量作用域2">局部JS变量</span></h2><p>在 JavaScript 函数中声明的变量，会成为函数的局部变量。<br>局部变量的作用域是局部的：只能在函数内部访问它们。</p><h2 id="全局JS变量"><a href="#全局JS变量" class="headerlink" title="全局JS变量"></a><span id="变量作用域3">全局JS变量</span></h2><p>函数之外声明的变量，会成为全局变量。<br>全局变量的作用域是全局的：网页的所有脚本和函数都能够访问它。</p><h2 id="JS变量"><a href="#JS变量" class="headerlink" title="JS变量"></a><span id="变量作用域4">JS变量</span></h2><p>在 JavaScript 中，对象和函数也是变量。<br>作用域决定了从代码不同部分对变量、对象和函数的可访问性。</p><h2 id="自动全局"><a href="#自动全局" class="headerlink" title="自动全局"></a><span id="变量作用域5">自动全局</span></h2><p>如果您为尚未声明的变量赋值，此变量会自动成为全局变量。<br>这段代码将声明一个全局变量 carName，即使在函数内进行了赋值。</p><h2 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a><span id="变量作用域6">严格模式</span></h2><p>所有现代浏览器都支持以“严格模式”运行 JavaScript。<br>在“严格模式”中不会自动创建全局变量。</p><h2 id="HTML-中的全局变量"><a href="#HTML-中的全局变量" class="headerlink" title="HTML 中的全局变量"></a><span id="变量作用域7">HTML 中的全局变量</span></h2><p>通过 JavaScript，全局作用域形成了完整的 JavaScript 环境。<br>在 HTML 中，全局作用域是 window。所有全局变量均属于 window 对象。</p><h2 id="警告"><a href="#警告" class="headerlink" title="警告"></a><span id="变量作用域8">警告</span></h2><p>除非有意为之，否则请勿创建全局变量。<br>您的全局变量（或函数）能够覆盖 window 变量（或函数）。<br>任何函数，包括 window 对象，能够覆盖您的全局变量和函数。</p><h2 id="JS-变量的有效期"><a href="#JS-变量的有效期" class="headerlink" title="JS 变量的有效期"></a><span id="变量作用域9">JS 变量的有效期</span></h2><p>JavaScript 变量的有效期始于其被创建时。<br>局部变量会在函数完成时被删除。<br>全局变量会在您关闭页面是被删除。</p><h2 id="函数参数"><a href="#函数参数" class="headerlink" title="函数参数"></a><span id="变量作用域10">函数参数</span></h2><p>函数参数也是函数内的局部变量。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript基础</category>
      
      <category>变量、作用域</category>
      
    </categories>
    
    
    <tags>
      
      <tag>变量、作用域</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>函数、事件[JS基础]</title>
    <link href="/JavaScript_basic/2022/06/30/index3/"/>
    <url>/JavaScript_basic/2022/06/30/index3/</url>
    
    <content type="html"><![CDATA[<!-- # XXX --><p><a href="#jump1"><code>1.xxx</code></a></p><h2 id="XXX"><a href="#XXX" class="headerlink" title="XXX"></a><span id="jump1">XXX</span></h2>]]></content>
    
    
    <categories>
      
      <category>JavaScript基础</category>
      
      <category>函数、事件</category>
      
    </categories>
    
    
    <tags>
      
      <tag>函数、事件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>内置对象[JS基础]</title>
    <link href="/JavaScript_basic/2022/06/30/index2/"/>
    <url>/JavaScript_basic/2022/06/30/index2/</url>
    
    <content type="html"><![CDATA[<!-- # XXX --><p><a href="#%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A11"><code>1.JavaScript 标准内置对象</code></a></p><h2 id="JavaScript-标准内置对象"><a href="#JavaScript-标准内置对象" class="headerlink" title="JavaScript 标准内置对象"></a><span id="jump1">JavaScript 标准内置对象</span></h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects">内置对象参考手册</a></p><table><thead><tr><th align="left">分类</th><th align="left">例子</th><th align="center">例子描述</th></tr></thead><tbody><tr><td align="left">值属性</td><td align="left"><code>Infinity</code> <code>NaN</code> <code>undefined</code> <code>globalThis</code></td><td align="center">这些全局属性返回一个简单值，这些值没有自己的属性和方法。</td></tr><tr><td align="left">函数属性</td><td align="left"><code>eval()</code> <code>uneval()</code> <code>isFinite()</code> <code>isNaN()</code> <code>parseFloat()</code> <code>parseInt()</code> <code>decodeURI()</code> <code>decodeURIComponent()</code> <code>encodeURI()</code> <code>encodeURIComponent()</code> 已废弃: <code>escape()</code> <code>unescape()</code></td><td align="center">全局函数可以直接调用，不需要在调用时指定所属对象，执行结束后会将结果直接返回给调用者。</td></tr><tr><td align="left">基本对象</td><td align="left"><code>Object</code> <code>Function</code> <code>Boolean</code> <code>Symbol</code></td><td align="center">顾名思义，基本对象是定义或使用其他对象的基础。基本对象包括一般对象、函数对象和错误对象。</td></tr><tr><td align="left">错误对象</td><td align="left"><code>Error</code> <code>AggregateError</code> <code>EvalError</code> <code>InternalError</code> <code>RangeError</code> <code>ReferenceError</code> <code>SyntaxError</code> <code>TypeError</code> <code>URIError</code></td><td align="center">错误对象是一种特殊的基本对象。它们拥有基本的 Error 类型，同时也有多种具体的错误类型。</td></tr><tr><td align="left">数字和日期对象</td><td align="left"><code>Number</code> <code>BigInt</code> <code>Math</code> <code>Date</code></td><td align="center">用来表示数字、日期和执行数学计算的对象。</td></tr><tr><td align="left">字符串</td><td align="left"><code>String</code> <code>RegExp</code></td><td align="center">用来表示和操作字符串的对象。</td></tr><tr><td align="left">可索引的集合对象</td><td align="left"><code>Array</code> <code>Int8Array</code> <code>Uint8Array</code> <code>Uint8ClampedArray</code> <code>Int16Array</code> <code>Uint16Array</code> <code>Int32Array</code> <code>Uint32Array</code> <code>Float32Array</code> <code>Float64Array</code> <code>BigInt64Array</code> <code>BigUint64Array</code></td><td align="center">这些对象表示按照索引值来排序的数据集合，包括数组和类型数组，以及类数组结构的对象。</td></tr><tr><td align="left">使用键的集合对象</td><td align="left"><code>Map</code> <code>Set</code> <code>WeakMap</code> <code>WeakSet</code></td><td align="center">这些集合对象在存储数据时会使用到键，包括可迭代的Map 和 Set，支持按照插入顺序来迭代元素。</td></tr><tr><td align="left">结构化数据</td><td align="left"><code>ArrayBuffer</code> <code>SharedArrayBuffer</code> <code>Atomics</code> <code>DataView</code> <code>JSON</code></td><td align="center">这些对象用来表示和操作结构化的缓冲区数据，或使用 JSON（JavaScript Object Notation）编码的数据。</td></tr><tr><td align="left">控制抽象对象</td><td align="left"><code>Promise</code> <code>Generator</code> <code>GeneratorFunction</code> <code>AsyncFunction</code></td><td align="center">控件抽象可以帮助构造代码，尤其是异步代码（例如，不使用深度嵌套的回调）。</td></tr><tr><td align="left">反射</td><td align="left"><code>Reflect</code> <code>Proxy</code></td><td align="center"></td></tr><tr><td align="left">国际化</td><td align="left"><code>Intl  </code>Intl.Collator  <code>Intl.DateTimeFormat  </code>Intl.ListFormat  <code>Intl.NumberFormat  </code>Intl.PluralRules  <code>Intl.RelativeTimeFormat  </code>Intl.Locale`</td><td align="center">ECMAScript 核心的附加功能，用于支持多语言处理。</td></tr><tr><td align="left">WebAssembly</td><td align="left"><code>WebAssembly</code> <code>WebAssembly.Module</code> <code>WebAssembly.Instance</code> <code>WebAssembly.Memory</code> <code>WebAssembly.Table</code> <code>WebAssembly.CompileError</code> <code>WebAssembly.LinkError (en-US)</code> <code>WebAssembly.RuntimeError</code></td><td align="center"></td></tr><tr><td align="left">其他</td><td align="left"><code>agruments</code></td><td align="center"></td></tr></tbody></table>]]></content>
    
    
    <categories>
      
      <category>JavaScript基础</category>
      
      <category>内置对象</category>
      
    </categories>
    
    
    <tags>
      
      <tag>内置对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>流程控制语句[JS基础]</title>
    <link href="/JavaScript_basic/2022/06/30/index1/"/>
    <url>/JavaScript_basic/2022/06/30/index1/</url>
    
    <content type="html"><![CDATA[<!-- # XXX --><p><a href="#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A51"><code>1.条件分支语句</code></a> <a href="#%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E8%AF%AD%E5%8F%A52"><code>2.循环语句</code></a></p><h2 id="条件分支语句"><a href="#条件分支语句" class="headerlink" title="条件分支语句"></a><span id="流程控制语句1">条件分支语句</span></h2><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 结构</span><br><span class="hljs-keyword">if</span> (condition expression) &#123;<br>  statement1;<br>&#125; <span class="hljs-keyword">else</span> &#123;<br>  statement2;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="三元表达式"><a href="#三元表达式" class="headerlink" title="三元表达式"></a>三元表达式</h3><p>三目运算符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs js">boolean_expression ? true_value : false_value;<br></code></pre></td></tr></table></figure><h3 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">switch</span> (表达式) &#123;<br><span class="hljs-keyword">case</span> 值<span class="hljs-number">1</span>:<br>  结构体<span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> 值<span class="hljs-number">2</span>:<br>  结构体<span class="hljs-number">2</span>;<br>  <span class="hljs-keyword">break</span>;<br>……<br><span class="hljs-attr">default</span>: <br>  结构体n；<br>  <span class="hljs-keyword">break</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a><span id="流程控制语句2">循环语句</span></h2><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do while循环"></a>do while循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">do</span> &#123;<br>  语句<span class="hljs-number">1</span>;<br>  语句<span class="hljs-number">2</span>;<br>    ....<br>&#125; <span class="hljs-keyword">while</span> ( 条件 );<br></code></pre></td></tr></table></figure><h3 id="While循环"><a href="#While循环" class="headerlink" title="While循环"></a>While循环</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-keyword">while</span> ( 条件表达式 ) &#123;<br>  语句<span class="hljs-number">1</span>;<br>  语句<span class="hljs-number">2</span>;<br>  ....<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="循环里面的break-和continue-语句"><a href="#循环里面的break-和continue-语句" class="headerlink" title="循环里面的break;和continue;语句"></a>循环里面的break;和continue;语句</h3><h4 id="break语句"><a href="#break语句" class="headerlink" title="break语句"></a>break语句</h4><p>break 语句的作用可以立即停止当前的 for、do while、while 循环。 根据一些条件设置 break 位置，直到循环能够执行到 break 语句立即停止执行，跳出循环。<br><em>break只中断了最内层循环，外层循环还在继续,break后面的语句永远不会被执行</em><br><em>break关键字只能用于循环语句和switch语句, 在其它地方没有意义</em><br>如果你这个break就是想终止所有的循环，那么JS中允许你给循环语句加label,break后面的语句永远不会被执行</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">//break只能终止内层循环，但是我们就是想要终止外层循环</span><br><span class="hljs-comment">//就要给外层循环加label：</span><br>waiceng : <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">1</span> ; i &lt;= <span class="hljs-number">10</span> ; i++)&#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j = <span class="hljs-number">1</span> ; j &lt;= <span class="hljs-number">10</span> ; j++)&#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i,j);<br>    <span class="hljs-keyword">if</span>(j == <span class="hljs-number">5</span>)&#123;<br>      <span class="hljs-keyword">break</span> waiceng;      <span class="hljs-comment">//break label的语法</span><br>      <span class="hljs-title function_">alert</span>(<span class="hljs-string">&quot;哈哈&quot;</span>);<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="continue语句"><a href="#continue语句" class="headerlink" title="continue语句"></a>continue语句</h4><p>遇到 continue 表示当前的一次循环数据不是我们想要的，会立即停止当前次的循环，立即进入下一次循环。<br>遇见continue语句，for会立即终止执行后面的语句，然后进入下一次迭代了<br><em>只能用于循环结构, 在其它地方没有意义;continue后面的语句永远不会被执行</em><br>continue只能终端当前最内层的for，外层for要加label。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs js">waiceng : <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> i = <span class="hljs-number">2</span> ; i &lt;= <span class="hljs-number">50</span> ; i++)&#123;<br>  <span class="hljs-keyword">for</span>(<span class="hljs-keyword">var</span> j = <span class="hljs-number">2</span> ; j &lt;= <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">sqrt</span>(i) ; j++)&#123;<br>    <span class="hljs-keyword">if</span>(i % j == <span class="hljs-number">0</span>)&#123;<br>      <span class="hljs-keyword">continue</span> waiceng;   <span class="hljs-comment">//如果这数字，被某一个数字整除了，那么立即放弃他</span><br>    &#125;<br>  &#125;<br>  <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(i); <span class="hljs-comment">//如果一个数字有约数，就会执行continue，就遇不见这个语句了。</span><br>&#125;<br></code></pre></td></tr></table></figure><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>break 和 continue 这两个语句的出现可以帮助我们大量的<code>优化代码</code>，<code>减少</code>了计算机的<code>计算次数</code>。</p>]]></content>
    
    
    <categories>
      
      <category>JavaScript基础</category>
      
      <category>流程控制语句</category>
      
    </categories>
    
    
    <tags>
      
      <tag>流程控制语句</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>大前端技术栈</title>
    <link href="/zh-CN/2022/06/13/index/"/>
    <url>/zh-CN/2022/06/13/index/</url>
    
    <content type="html"><![CDATA[<p><img src="../../../../../../images/%E5%A4%A7%E5%89%8D%E7%AB%AF%E6%8A%80%E6%9C%AF%E6%A0%88.png" alt="大前端技术栈"></p>]]></content>
    
    
    <categories>
      
      <category>大前端技术栈</category>
      
    </categories>
    
    
    <tags>
      
      <tag>大前端技术栈</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Canvas[HTML5+CSS3]</title>
    <link href="/HTML5+CSS3/2022/06/13/index8/"/>
    <url>/HTML5+CSS3/2022/06/13/index8/</url>
    
    <content type="html"><![CDATA[<!-- # Canvas --><p><a href="#Canvas1"><code>1.动画</code></a> <a href="#Canvas2"><code>2.游戏</code></a> <a href="#Canvas3"><code>3.演示</code></a><br>HTML5<code>&lt;canvas&gt;</code>元素用于图形的绘制，通过脚本 (通常是JavaScript)来完成.<code>&lt;canvas&gt;</code> 标签只是图形容器，您必须使用脚本来绘制图形。你可以通过多种方法使用 canvas 绘制路径,盒、圆、字符以及添加图像。<br><strong>标签的完整属性可以参考<a href="https://www.runoob.com/tags/ref-canvas.html">Canvas 参考手册</a>.</strong></p><ul><li>Canvas 坐标<br>左上角坐标为(0,0)<br>Math.PI 表示一个圆的周长与直径的比例，约为 3.14159<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs js"><span class="hljs-comment">// 渐变实例</span><br><span class="hljs-keyword">var</span> c=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myCanvas&quot;</span>);<br><span class="hljs-keyword">var</span> ctx=c.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);<br> <br><span class="hljs-comment">// 创建渐变</span><br><span class="hljs-keyword">var</span> grd=ctx.<span class="hljs-title function_">createLinearGradient</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">200</span>,<span class="hljs-number">0</span>);<br>grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">0</span>,<span class="hljs-string">&quot;red&quot;</span>);<br>grd.<span class="hljs-title function_">addColorStop</span>(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;white&quot;</span>);<br> <br><span class="hljs-comment">// 填充渐变</span><br>ctx.<span class="hljs-property">fillStyle</span>=grd;<br>ctx.<span class="hljs-title function_">fillRect</span>(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">150</span>,<span class="hljs-number">80</span>);<br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Image to use:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;scream&quot;</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;img_the_scream.jpg&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;The Scream&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;220&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;277&quot;</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">p</span>&gt;</span>Canvas:<span class="hljs-tag">&lt;/<span class="hljs-name">p</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">canvas</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;myCanvas&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;250&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;300&quot;</span> <span class="hljs-attr">style</span>=<span class="hljs-string">&quot;border:1px solid #d3d3d3;&quot;</span>&gt;</span><br>您的浏览器不支持 HTML5 canvas 标签。<span class="hljs-tag">&lt;/<span class="hljs-name">canvas</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript"></span><br><span class="language-javascript"><span class="hljs-keyword">var</span> c=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;myCanvas&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> ctx=c.<span class="hljs-title function_">getContext</span>(<span class="hljs-string">&quot;2d&quot;</span>);</span><br><span class="language-javascript"><span class="hljs-keyword">var</span> img=<span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;scream&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">img.<span class="hljs-property">onload</span> = <span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">ctx.<span class="hljs-title function_">drawImage</span>(img,<span class="hljs-number">10</span>,<span class="hljs-number">10</span>);</span><br><span class="language-javascript">&#125; </span><br><span class="language-javascript"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><table><thead><tr><th align="left">方法</th><th align="center">描述</th><th align="center">类型</th></tr></thead><tbody><tr><td align="left">fillRect参数(0,0,150,75)</td><td align="center">在画布上绘制 150x75 的矩形，从左上角开始 (0,0)。</td><td align="center">坐标</td></tr><tr><td align="left">moveTo(x,y)</td><td align="center">定义线条开始坐标</td><td align="center">路径</td></tr><tr><td align="left">lineTo(x,y)</td><td align="center">定义线条结束坐标</td><td align="center">路径</td></tr><tr><td align="left">arc(x,y,r,start,stop)</td><td align="center">绘制圆形: ctx.arc(0,0,40,0,2*Math.PI);</td><td align="center">路径</td></tr><tr><td align="left">stroke()</td><td align="center">根据定义好的坐标连线</td><td align="center"></td></tr><tr><td align="left">font</td><td align="center">定义字体: font=”30px Arial”;</td><td align="center">文本</td></tr><tr><td align="left">illText(text,x,y)</td><td align="center">在 canvas 上绘制实心的文本:fillText(“Hello World”,10,50);</td><td align="center">文本</td></tr><tr><td align="left">strokeText(text,x,y)</td><td align="center">在 canvas 上绘制空心的文本:strokeText(“Hello World”,10,50);</td><td align="center">文本</td></tr><tr><td align="left">createLinearGradient(x,y,x1,y1)</td><td align="center">创建线条渐变</td><td align="center">渐变</td></tr><tr><td align="left">createRadialGradient(x,y,r,x1,y1,r1)</td><td align="center">创建一个径向/圆渐变</td><td align="center">渐变</td></tr><tr><td align="left">addColorStop()</td><td align="center">方法指定颜色停止：</td><td align="center">渐变</td></tr><tr><td align="left">fillStyle</td><td align="center">使用渐变，将其值设为渐变，然后绘制形状</td><td align="center">渐变</td></tr><tr><td align="left">strokeStyle</td><td align="center">使用渐变，将其值设为渐变，然后绘制形状</td><td align="center">渐变</td></tr><tr><td align="left">drawImage(image,x,y)</td><td align="center"></td><td align="center">图像</td></tr></tbody></table><h2 id="动画"><a href="#动画" class="headerlink" title="动画"></a><span id="Canvas1">动画</span></h2><p><a href="../../page/canvas.html">动画在线演示</a></p><h2 id="游戏"><a href="#游戏" class="headerlink" title="游戏"></a><span id="Canvas2">游戏</span></h2><h2 id="演示"><a href="#演示" class="headerlink" title="演示"></a><span id="Canvas3">演示</span></h2>]]></content>
    
    
    <categories>
      
      <category>HTML5+CSS3</category>
      
      <category>Canvas</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Canvas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>音视频的基本操作[HTML5+CSS3]</title>
    <link href="/HTML5+CSS3/2022/06/13/index7/"/>
    <url>/HTML5+CSS3/2022/06/13/index7/</url>
    
    <content type="html"><![CDATA[<!-- # 音视频的基本操作 --><p><a href="#%E9%9F%B3%E8%A7%86%E9%A2%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C1"><code>1.使用video播放视频</code></a> <a href="#%E9%9F%B3%E8%A7%86%E9%A2%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C2"><code>2.使用audio播放音频</code></a></p><ul><li>视频：mp4、ogv、webm</li><li>音频：mp3、ogg、wav<h2 id="使用video播放视频"><a href="#使用video播放视频" class="headerlink" title="使用video播放视频"></a><span id="音视频的基本操作1">使用video播放视频</span></h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-comment">&lt;!-- 具体写法 --&gt;</span><br><span class="hljs-comment">&lt;!-- </span><br><span class="hljs-comment">  1.可以在地址后面加你想要的限制条件，比如上面的controls就是添加播放控件的意思。</span><br><span class="hljs-comment">  2.部分浏览器是不支持自动播放的，想要他播放就在后面加个静音muted就可以了。</span><br><span class="hljs-comment">  3.有的可以只写属性而不写属性值，比如autplay，但为了程序的顺利运行建议都写。</span><br><span class="hljs-comment">--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;文件地址&quot;</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">&quot;controls&quot;</span>  &gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br><br><span class="hljs-comment">&lt;!-- 考虑兼容性 --&gt;</span><br><span class="hljs-comment">&lt;!-- 先用MP4格式，如果不支持就用Ogg格式，如果都不支持就直接说：您的浏览器不支持video格式。这里的happy是视频文件。 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">controls</span>=<span class="hljs-string">&quot;controls&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;video.mp4&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/mp4&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;video.ogg&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;video/ogg&quot;</span>&gt;</span><br>  您的浏览器不支持video格式<br><span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>音视频的基本操作<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-tag">video</span>&#123;</span><br><span class="language-css">        <span class="hljs-attribute">width</span>: <span class="hljs-number">600px</span>;</span><br><span class="language-css">        <span class="hljs-attribute">height</span>:<span class="hljs-number">500px</span>;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">video</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;video&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./demo.mp4&quot;</span> /&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">source</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./demo.ogg&quot;</span> /&gt;</span><br>      您的浏览器不支持 HTML5 video 标签。<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">video</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">br</span> /&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">button</span> <span class="hljs-attr">onclick</span>=<span class="hljs-string">&quot;getDateInfo()&quot;</span>&gt;</span>点击获取基本信息<span class="hljs-tag">&lt;/<span class="hljs-name">button</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">fieldset</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">legend</span>&gt;</span>基本信息<span class="hljs-tag">&lt;/<span class="hljs-name">legend</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;text&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">fieldset</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text/javascript&quot;</span>&gt;</span><span class="language-javascript"></span><br><span class="language-javascript">            </span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> video = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;video&quot;</span>);</span><br><span class="language-javascript">    <span class="hljs-keyword">var</span> text = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&quot;text&quot;</span>);</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-comment">// 默认值</span></span><br><span class="language-javascript">    video.<span class="hljs-property">autoplay</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 允许自动播放</span></span><br><span class="language-javascript">    video.<span class="hljs-property">defaultMuted</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 静音</span></span><br><span class="language-javascript">    video.<span class="hljs-property">playbackRate</span> = <span class="hljs-number">1.0</span>;  <span class="hljs-comment">// -- 改变播放速度</span></span><br><span class="language-javascript">    video.<span class="hljs-property">loop</span> = <span class="hljs-literal">true</span>;        <span class="hljs-comment">// -- 是否循环播放</span></span><br><span class="language-javascript"></span><br><span class="language-javascript">    video.<span class="hljs-property">controls</span> = <span class="hljs-literal">true</span>; <span class="hljs-comment">// 有控件,就不需要以上按钮</span></span><br><span class="language-javascript">    </span><br><span class="language-javascript">    <span class="hljs-comment">//点击播放或暂停</span></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">bofang</span>(<span class="hljs-params"></span>)&#123;</span><br><span class="language-javascript">      <span class="hljs-keyword">if</span> (video.<span class="hljs-property">paused</span>) &#123;</span><br><span class="language-javascript">        video.<span class="hljs-title function_">play</span>(); <span class="hljs-comment">// 播放</span></span><br><span class="language-javascript">      &#125;<span class="hljs-keyword">else</span> &#123;</span><br><span class="language-javascript">        video.<span class="hljs-title function_">pause</span>(); <span class="hljs-comment">// 暂停</span></span><br><span class="language-javascript">      &#125;;</span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript"></span><br><span class="language-javascript">    <span class="hljs-keyword">function</span> <span class="hljs-title function_">getDateInfo</span>(<span class="hljs-params"></span>) &#123;</span><br><span class="language-javascript">      text.<span class="hljs-property">innerHTML</span> = <span class="hljs-string">`</span></span><br><span class="hljs-string"><span class="language-javascript">      播放状态：<span class="hljs-subst">$&#123;video.paused?<span class="hljs-string">&#x27;暂停&#x27;</span>:<span class="hljs-string">&#x27;播放&#x27;</span>&#125;</span>&lt;/br&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">      音视频的总时间：<span class="hljs-subst">$&#123;(video.duration).toFixed(<span class="hljs-number">2</span>)&#125;</span>s&lt;/br&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">      当前播放时间点：<span class="hljs-subst">$&#123;(video.currentTime).toFixed(<span class="hljs-number">2</span>)&#125;</span>s&lt;/br&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">      播放速度：<span class="hljs-subst">$&#123;video.playbackRate&#125;</span>&lt;/br&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">      音量大小：<span class="hljs-subst">$&#123;video.volume&#125;</span>&lt;/br&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">      声音状态：<span class="hljs-subst">$&#123;video.muted?<span class="hljs-string">&#x27;静音&#x27;</span>:<span class="hljs-string">&#x27;未静音&#x27;</span>&#125;</span>&lt;/br&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">      控件: <span class="hljs-subst">$&#123;video.controls&#125;</span>&lt;/br&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">      是否静音输出： <span class="hljs-subst">$&#123;video.defaultMuted&#125;</span>&lt;/br&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">      是否自动播放：<span class="hljs-subst">$&#123;video.autoplay&#125;</span>&lt;/br&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">      是否播放结束：<span class="hljs-subst">$&#123;video.ended&#125;</span>&lt;/br&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">      是否循环播放：<span class="hljs-subst">$&#123;video.loop&#125;</span>&lt;/br&gt;</span></span><br><span class="hljs-string"><span class="language-javascript">        `</span></span><br><span class="language-javascript">    &#125;</span><br><span class="language-javascript">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul><table><thead><tr><th align="left">属性</th><th align="center">描述</th><th align="left">类型</th></tr></thead><tbody><tr><td align="left">play()</td><td align="center">表示视频播放</td><td align="left">用于操作DOM的方法</td></tr><tr><td align="left">pause()</td><td align="center">表示视频暂停</td><td align="left">用于操作DOM的方法</td></tr><tr><td align="left">autoplay</td><td align="center">设置或返回音视频加载完之后是否立即播放</td><td align="left">用于操作DOM的属性【新增】</td></tr><tr><td align="left">controls</td><td align="center">设置或返回音视频是否添加控件，如：开始。暂停</td><td align="left">用于操作DOM的属性【新增】</td></tr><tr><td align="left">loop</td><td align="center">设置是否循环播放。true – 循环播放 false – 不循环播放</td><td align="left">用于操作DOM的属性【新增】</td></tr><tr><td align="left">muted</td><td align="center">设置或返回当前播放音视频是否是静音输出。true – 静音 false — 不是静音</td><td align="left">用于操作DOM的属性【新增】</td></tr><tr><td align="left">paused</td><td align="center">设置或返回音视频是否被暂停</td><td align="left">用于操作DOM的属性</td></tr><tr><td align="left">duration</td><td align="center">获取音视频的总时间，单位：秒</td><td align="left">用于操作DOM的属性</td></tr><tr><td align="left">currentTime</td><td align="center">获取当前播放时间</td><td align="left">用于操作DOM的属性</td></tr><tr><td align="left">defaultMuted</td><td align="center">设置音视频是否静音输出 true – 静音 默认false，不静音</td><td align="left">用于操作DOM的属性</td></tr><tr><td align="left">playbackRate</td><td align="center">设置音视频播放速度。1.0表示正常；0.5表示半速；2.0表示倍速</td><td align="left">用于操作DOM的属性</td></tr><tr><td align="left">volume</td><td align="center">设置或返回音视频的音量。介于1~0之间的数</td><td align="left">用于操作DOM的属性</td></tr><tr><td align="left">ended</td><td align="center">返回音视频是否播放结束。false – 未结束 true – 已结束</td><td align="left">用于操作DOM的属性</td></tr></tbody></table><h2 id="使用audio播放音频"><a href="#使用audio播放音频" class="headerlink" title="使用audio播放音频"></a><span id="音视频的基本操作2">使用audio播放音频</span></h2><p>音频与视频的使用格式基本一样，具体写法也只是把video改成audio</p>]]></content>
    
    
    <categories>
      
      <category>HTML5+CSS3</category>
      
      <category>音视频的基本操作</category>
      
    </categories>
    
    
    <tags>
      
      <tag>音视频的基本操作</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DIV布局[HTML5+CSS3]</title>
    <link href="/HTML5+CSS3/2022/06/13/index5/"/>
    <url>/HTML5+CSS3/2022/06/13/index5/</url>
    
    <content type="html"><![CDATA[<!-- # DIV布局 --><p><a href="#DIV%E5%B8%83%E5%B1%801"><code>1.盒子模型</code></a> <a href="#DIV%E5%B8%83%E5%B1%802"><code>2.弹性布局(Flex布局)</code></a> <a href="#DIV%E5%B8%83%E5%B1%803"><code>3.双飞翼布局</code></a></p><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a><span id="DIV布局1">盒子模型</span></h2><table><thead><tr><th align="left">盒子定位</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">静态static</td><td align="center">position的默认值，此时该CSS修饰元素按照标准流进行布局（包括float浮动）</td></tr><tr><td align="left">相对relative</td><td align="center">以标准流为参照物，使CSS修饰的元素偏移相对其在标准流的位置的距离。left或right属性指定追平偏移量，top和bottom属性指定垂直偏移量。</td></tr><tr><td align="left">绝对absolute</td><td align="center">类似于relative但以浏览器或最近一个position不为static的父级元素为定位基准。left或right属性指定追平偏移量，top和bottom属性指定垂直偏移量。</td></tr><tr><td align="left">固定fixed</td><td align="center">以浏览器窗口为基准进行定位（移动滚动条不影响其位置）</td></tr></tbody></table><h2 id="弹性布局（Flex布局）"><a href="#弹性布局（Flex布局）" class="headerlink" title="弹性布局（Flex布局）"></a><span id="DIV布局2">弹性布局（Flex布局）</span></h2><p>弹性布局也称flex布局</p><table><thead><tr><th align="left">属性</th><th align="center">描述</th><th align="center">类型</th><th align="left">值</th></tr></thead><tbody><tr><td align="left">display</td><td align="center">指定 HTML 元素的盒子类型</td><td align="center"></td><td align="left">当值为flex，表示使用的是弹性布局</td></tr><tr><td align="left">flex-direction</td><td align="center">指定弹性盒子中子元素的排列方式</td><td align="center">容器属性</td><td align="left">row、row-reverse、column、column-reverse、initial、inherit</td></tr><tr><td align="left">flex-wrap</td><td align="center">设置当弹性盒子的子元素超出父容器时是否换行</td><td align="center">容器属性</td><td align="left">no-wrap、wrap、wrap-reverse、initial、inherit</td></tr><tr><td align="left">flex-flow</td><td align="center">flex-direction 和 flex-wrap 两个属性的简写</td><td align="center">容器属性</td><td align="left">flex-flow: flex-direction flex-wrap;</td></tr><tr><td align="left">justify-content</td><td align="center">设置弹性盒子中元素在主轴（横轴）方向上的对齐方式</td><td align="center">容器属性</td><td align="left">flex-start、flex-end、center、space-between、space-around、initial、inherit</td></tr><tr><td align="left">align-items</td><td align="center">设置弹性盒子中元素在侧轴（纵轴）方向上的对齐方式</td><td align="center">容器属性</td><td align="left">strtch、center、flex-start、flex-end、baseline、initial、inherit</td></tr><tr><td align="left">align-content</td><td align="center">修改 flex-wrap 属性的行为，类似 align-items，但不是设置子元素对齐，而是设置行对齐</td><td align="center">容器属性</td><td align="left">stretch、center、flex-start、flex-end、space-between、space-around、initial、inherit</td></tr><tr><td align="left">order</td><td align="center">设置弹性盒子中子元素的排列顺序</td><td align="center">项目属性</td><td align="left"></td></tr><tr><td align="left">align-self</td><td align="center">在弹性盒子的子元素上使用，用来覆盖容器的 align-items 属性</td><td align="center">项目属性</td><td align="left">auto、stretch、center、flex-start、flex-end、baseline、initial、inherit</td></tr><tr><td align="left">flex</td><td align="center">设置弹性盒子中子元素如何分配空间</td><td align="center">项目属性</td><td align="left">flex: flex-grow(必须) flex-shrink(可选) flex-basis(可选);</td></tr><tr><td align="left">flex-grow</td><td align="center">设置弹性盒子的扩展比率</td><td align="center">项目属性</td><td align="left">默认0</td></tr><tr><td align="left">flex-shrink</td><td align="center">设置弹性盒子的收缩比率</td><td align="center">项目属性</td><td align="left">默认1</td></tr><tr><td align="left">flex-basis</td><td align="center">设置弹性盒子伸缩基准值</td><td align="center">项目属性</td><td align="left">默认auto</td></tr></tbody></table><h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a><span id="DIV布局3">双飞翼布局</span></h2><p><strong>双飞翼布局要求</strong></p><ul><li>header和footer各自占领屏幕所有宽度，高度固定。</li><li>中间的container是一个三栏布局。</li><li>三栏布局两侧宽度固定不变，中间部分自动填充整个区域。</li><li>中间部分的高度是三栏中最高的区域的高度。</li></ul><p><strong>双飞翼布局的实现</strong></p><ul><li>left、center、right三种都设置左浮动</li><li>设置center宽度为100%</li><li>设置负边距，left设置负边距为100%，right设置负边距为自身宽度</li><li>设置content的margin值为左右两个侧栏留出空间，margin值大小为left和right宽度<br><img src="../../../../../../images/%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80.png" alt="双飞翼布局"><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;utf-8&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;http://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">  <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">min-width</span>: <span class="hljs-number">550px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">font-weight</span>: bold;</span><br><span class="language-css">    <span class="hljs-attribute">font-size</span>: <span class="hljs-number">20px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-id">#header</span>,</span><br><span class="language-css">  <span class="hljs-selector-id">#footer</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">29</span>, <span class="hljs-number">27</span>, <span class="hljs-number">27</span>, <span class="hljs-number">0.726</span>);</span><br><span class="language-css">    <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">60px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-id">#container</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.column</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">text-align</span>: center;</span><br><span class="language-css">    <span class="hljs-attribute">height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">line-height</span>: <span class="hljs-number">300px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-id">#left</span>, <span class="hljs-selector-id">#right</span>, <span class="hljs-selector-id">#center</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">float</span>: left;</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-id">#center</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">100%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">206</span>, <span class="hljs-number">201</span>, <span class="hljs-number">201</span>);</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-id">#left</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">200px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">100%</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">95</span>, <span class="hljs-number">179</span>, <span class="hljs-number">235</span>, <span class="hljs-number">0.972</span>);</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-id">#right</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">width</span>: <span class="hljs-number">150px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">margin-left</span>: -<span class="hljs-number">150px</span>;</span><br><span class="language-css">    <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgb</span>(<span class="hljs-number">231</span>, <span class="hljs-number">105</span>, <span class="hljs-number">2</span>);</span><br><span class="language-css">  &#125;</span><br><span class="language-css">  <span class="hljs-selector-class">.content</span> &#123;</span><br><span class="language-css">    <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span> <span class="hljs-number">150px</span> <span class="hljs-number">0</span> <span class="hljs-number">200px</span>;</span><br><span class="language-css">  &#125;</span><br><span class="language-css"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br> <br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;header&quot;</span>&gt;</span>#header<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;container&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;center&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;content&quot;</span>&gt;</span>#center<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;left&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>#left<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;right&quot;</span> <span class="hljs-attr">class</span>=<span class="hljs-string">&quot;column&quot;</span>&gt;</span>#right<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br> <br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;footer&quot;</span>&gt;</span>#footer<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br> <br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>HTML5+CSS3</category>
      
      <category>DIV布局</category>
      
    </categories>
    
    
    <tags>
      
      <tag>DIV布局</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS3新特性[HTML5+CSS3]</title>
    <link href="/HTML5+CSS3/2022/06/13/index4/"/>
    <url>/HTML5+CSS3/2022/06/13/index4/</url>
    
    <content type="html"><![CDATA[<!-- # CSS3新特性 --><p><a href="#CSS3%E6%96%B0%E7%89%B9%E6%80%A74"><code>1.过渡、动画</code></a> <a href="#CSS3%E6%96%B0%E7%89%B9%E6%80%A72"><code>2.2D、3D转换</code></a> <a href="#CSS3%E6%96%B0%E7%89%B9%E6%80%A73"><code>3.边框、圆角</code></a> <a href="#CSS3%E6%96%B0%E7%89%B9%E6%80%A74"><code>4.背景、渐变</code></a></p><h2 id="过渡、动画"><a href="#过渡、动画" class="headerlink" title="过渡、动画"></a><span id="CSS3新特性1">过渡、动画</span></h2><h3 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h3><table><thead><tr><th align="left">过渡属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">transition</td><td align="center">简写属性，用于在一个属性中设置四个过渡属性。</td></tr><tr><td align="left">transition-property</td><td align="center">规定应用过渡的 CSS 属性的名称。</td></tr><tr><td align="left">transition-duration</td><td align="center">定义过渡效果花费的时间。默认是 0。</td></tr><tr><td align="left">transition-timing-function</td><td align="center">规定过渡效果的时间曲线。默认是 “ease”。</td></tr><tr><td align="left">transition-delay</td><td align="center">规定过渡效果何时开始。默认是 0。</td></tr></tbody></table><table><thead><tr><th align="left">过渡效果值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">linear</td><td align="center">规定以相同速度开始至结束的过渡效果（等于 cubic-bezier(0,0,1,1)）。</td></tr><tr><td align="left">ease</td><td align="center">规定慢速开始，然后变快，然后慢速结束的过渡效果（cubic-bezier(0.25,0.1,0.25,1)）。</td></tr><tr><td align="left">ease-in</td><td align="center">规定以慢速开始的过渡效果（等于 cubic-bezier(0.42,0,1,1)）。</td></tr><tr><td align="left">ease-out</td><td align="center">规定以慢速结束的过渡效果（等于 cubic-bezier(0,0,0.58,1)）。</td></tr><tr><td align="left">ease-in-out</td><td align="center">规定以慢速开始和结束的过渡效果（等于 cubic-bezier(0.42,0,0.58,1)）。</td></tr><tr><td align="left">cubic-bezier(n,n,n,n)</td><td align="center">在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值。</td></tr></tbody></table><h3 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h3><p>keyframes: 通过 @keyframes 规则，您能够创建动画。<br>moz: Firefox<br>webkit: Chrome Safari<br>o: Opera<br><code>Internet Explorer 10、Firefox 和 Opera 支持 CSS 动画。Safari 和 Chrome 通过带有前缀 -webkit-，支持 CSS 动画。</code><br>animation: 属性是一个简写属性，用于设置六个动画属性：</p><table><thead><tr><th align="left">动画属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">animation-name</td><td align="center">规定需要绑定到选择器的 keyframe 名称。</td></tr><tr><td align="left">animation-duration</td><td align="center">规定完成动画所花费的时间，以秒或毫秒计。</td></tr><tr><td align="left">animation-timing-function</td><td align="center">规定动画的速度曲线。</td></tr><tr><td align="left">animation-delay</td><td align="center">规定在动画开始之前的延迟。</td></tr><tr><td align="left">animation-iteration-count</td><td align="center">规定动画应该播放的次数。取值：n或者infinite（无限次）</td></tr><tr><td align="left">animation-direction</td><td align="center">规定是否应该轮流反向播放动画。取值：normal或者alternate（反向播放）</td></tr></tbody></table><table><thead><tr><th align="left">动画效果值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">linear</td><td align="center">动画从头到尾的速度是相同的。</td></tr><tr><td align="left">ease</td><td align="center">默认。动画以低速开始，然后加快，在结束前变慢。</td></tr><tr><td align="left">ease-in</td><td align="center">动画以低速开始。</td></tr><tr><td align="left">ease-out</td><td align="center">动画以低速结束。</td></tr><tr><td align="left">ease-in-out</td><td align="center">动画以低速开始和结束。</td></tr><tr><td align="left">cubic-bezier(n,n,n,n)</td><td align="center">在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。</td></tr></tbody></table><h2 id="2D、3D转换"><a href="#2D、3D转换" class="headerlink" title="2D、3D转换"></a><span id="CSS3新特性2">2D、3D转换</span></h2><p>CSS 转换（transforms）允许您移动、旋转、缩放和倾斜元素。</p><h3 id="2D转换"><a href="#2D转换" class="headerlink" title="2D转换"></a>2D转换</h3><p>主要通过transform 属性，该属性使用函数来定义的。</p><table><thead><tr><th align="left">转换属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">translate(x,y)</td><td align="center">位移：translate（x）接受一个参数表示沿x轴位移x像素，沿y轴默认为0，接受两个参数translate（x,y）表示沿x轴位移的距离和沿y轴位移的距离</td></tr><tr><td align="left">rotate(angle)</td><td align="center">旋转：参数表示旋转的角度，2d空间只能围绕元素中心的z轴旋转，正数是顺时针</td></tr><tr><td align="left">scale(x,y)</td><td align="center">缩放: 一个参数的时候表示同时在x轴和y轴两个方向缩放相同的倍数，两个参数表示分别x和y轴方向缩放相应的倍数</td></tr><tr><td align="left">skew()</td><td align="center">变形: 表示沿x轴变形x角度，y轴默认为0，两个参数表示沿x轴变形x的角度，沿y轴变形y的角度。单位为deg（度）</td></tr><tr><td align="left">matrix()</td><td align="center">matrix 方法有六个参数，包含移动（平移）、旋转、缩放、倾斜功能。</td></tr><tr><td align="left">transform-origin</td><td align="center">转换中心：可以改变旋转、缩放、变形的原点。默认为center，可以设置为关键字：top bottom center left right，也可以使用px、em、百分比值位置的</td></tr></tbody></table><h3 id="3D转换"><a href="#3D转换" class="headerlink" title="3D转换"></a>3D转换</h3><blockquote></blockquote><p><strong>应用在父元素上属性</strong></p><ul><li>设置3D变换：<code>transform-style: preserve-3d</code>，默认值为<code>flat</code>表示不保留3D变换</li><li>设置视角深度,又叫景深：<code>perspective: 1000px</code> 3D 元素距视图，视线的距离，单位为px，不了解的可以百度一下视角深度</li><li>观察点位置：<code>perspective-origin</code>：和上面的变换中心一样，只是变成了三维的，多了一个z轴的坐标。</li></ul><table><thead><tr><th align="left">转换属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">transform</td><td align="center">向元素应用2D或3D转换。</td></tr><tr><td align="left">transform-origin</td><td align="center">允许你改变被转换元素的位置。</td></tr><tr><td align="left">transform-style</td><td align="center">规定被嵌套元素如何在 3D 空间中显示。</td></tr><tr><td align="left">perspective-origin</td><td align="center">观察点位置: 规定3D元素的底部位置。</td></tr><tr><td align="left">backface-visibility</td><td align="center">定义元素在不面对屏幕时是否可见。</td></tr><tr><td align="left">perspective</td><td align="center">规定3D元素的透视效果。</td></tr></tbody></table><table><thead><tr><th align="left">转换方法</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">translate3d(x,y,z)</td><td align="center">位移</td></tr><tr><td align="left">translateX(x)</td><td align="center">定义 3D 转化，仅使用用于 X 轴的值。</td></tr><tr><td align="left">translateY(y)</td><td align="center">定义 3D 转化，仅使用用于 Y 轴的值。</td></tr><tr><td align="left">translateZ(z)</td><td align="center">定义 3D 转化，仅使用用于 Z 轴的值。</td></tr><tr><td align="left">scale3d(x,y,z)</td><td align="center">缩放</td></tr><tr><td align="left">scaleX(x)</td><td align="center">定义 3D 缩放转换，通过给定一个 X 轴的值。</td></tr><tr><td align="left">scaleY(y)</td><td align="center">定义 3D 缩放转换，通过给定一个 Y 轴的值。</td></tr><tr><td align="left">scaleZ(z)</td><td align="center">定义 3D 缩放转换，通过给定一个 Z 轴的值。</td></tr><tr><td align="left">rotate(x,y,z,angle)</td><td align="center">旋转</td></tr><tr><td align="left">rotateX(angle)</td><td align="center">定义沿 X 轴的 3D 旋转。</td></tr><tr><td align="left">rotateY(angle)</td><td align="center">定义沿 Y 轴的 3D 旋转。</td></tr><tr><td align="left">rotateZ(angle)</td><td align="center">定义沿 Z 轴的 3D 旋转。</td></tr><tr><td align="left">matrix3d(n,n,n,n, n,n,n,n, n,n,n,n, n,n,n,n)</td><td align="center">定义 3D 转换，使用 16 个值的 4x4 矩阵。</td></tr><tr><td align="left">perspective(n)</td><td align="center">定义 3D 转换元素的透视视图。</td></tr></tbody></table><h2 id="边框、圆角"><a href="#边框、圆角" class="headerlink" title="边框、圆角"></a><span id="CSS3新特性3">边框、圆角</span></h2><p>边框属性:</p><ul><li>border-radius：圆角属性</li><li>box-shadow：添加阴影</li><li>border-image: 边框图片，IE不支持、Safari 5以下需要加前缀-webkit-，Opera需要加-0-<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># css3语法</span><br>border-image：<span class="hljs-built_in">source</span> slice width outset repeat|initial|inherit;<br>box-shadow: h-shadow v-shadow blur spread color inset;<br></code></pre></td></tr></table></figure></li></ul><table><thead><tr><th align="left">image值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">border-image-source</td><td align="center">指定要用于绘制边框的图像的位置</td></tr><tr><td align="left">border-image-slice</td><td align="center">图像边界向内偏移</td></tr><tr><td align="left">border-image-width</td><td align="center">图像边界的宽度</td></tr><tr><td align="left">border-image-outset</td><td align="center">指定在边框外部绘制 border-image-area 的量</td></tr><tr><td align="left">border-image-repeat</td><td align="center">设置图像边界是否应重复（repeat）、拉伸（stretch）或铺满（round）</td></tr></tbody></table><table><thead><tr><th align="left">shadow值</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">h-shadow</td><td align="center">必需的。水平阴影的位置。允许负值</td></tr><tr><td align="left">v-shadow</td><td align="center">必需的。垂直阴影的位置。允许负值</td></tr><tr><td align="left">blur</td><td align="center">可选。模糊距离</td></tr><tr><td align="left">spread</td><td align="center">可选。阴影的大小</td></tr><tr><td align="left">color</td><td align="center">可选。阴影的颜色。在CSS颜色值寻找颜色值的完整列表</td></tr><tr><td align="left">inset</td><td align="center">可选。从外层的阴影（开始时）改变阴影内侧阴影</td></tr></tbody></table><h2 id="背景、渐变"><a href="#背景、渐变" class="headerlink" title="背景、渐变"></a><span id="CSS3新特性4">背景、渐变</span></h2><table><thead><tr><th align="left">新背景属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="left">background-clip</td><td align="center">规定背景的绘制区域: border-box、padding-box、content-box</td></tr><tr><td align="left">background-origin</td><td align="center">规定背景图片的定位区域: border-box、padding-box、content-box</td></tr><tr><td align="left">background-size</td><td align="center">规定背景图片的尺寸：length（高度，宽度）、percentage（高度，宽度）、cover、contain</td></tr></tbody></table><p>CSS3 定义了两种类型的渐变：<br>线性渐变（Linear Gradients）：向下/向上/向左/向右/对角方向<br>径向渐变（Radial Gradients）： 由它们的中心定义</p><p>径向渐变radial-gradient由它的中心定义。<br>必须至少定义两种颜色结点，颜色结点即你想要呈现平稳过渡的颜色。</p><ul><li>渐变的中心: center、n% n%</li><li>形状: 圆形(circle)、椭圆形(ellipse)</li><li>size大小:<br>closest-side：径向渐变的半径长度为从圆心到离圆心最近的边<br>farthest-side：径向渐变的半径长度为从圆心到离圆心最远的边<br>closest-corner：径向渐变的半径长度为从圆心到离圆心最近的角<br>farthest-corner：径向渐变的半径长度为从圆心到离圆心最远的角。</li><li>默认情况下，渐变的中心是 <code>center</code>，渐变的形状是 <code>ellipse</code>（表示椭圆形），渐变的大小是 <code>farthest-corner</code>（表示到最远的角<br>落）<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># css3语法</span><br>background：linear-gradient(...);<br>background: repeating-linear-gradient(...);<br>background：linear-gradient(...);<br>background: repeating-linear-gradient(...);<br></code></pre></td></tr></table></figure></li></ul>]]></content>
    
    
    <categories>
      
      <category>HTML5+CSS3</category>
      
      <category>CSS3新特性</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS3新特性</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>CSS基本样式编写[HTML5+CSS3]</title>
    <link href="/HTML5+CSS3/2022/06/13/index3/"/>
    <url>/HTML5+CSS3/2022/06/13/index3/</url>
    
    <content type="html"><![CDATA[<!-- # CSS3基本样式编写 --><p><a href="#CSS%E5%9F%BA%E6%9C%AC%E6%A0%B7%E5%BC%8F%E7%BC%96%E5%86%991"><code>1.选择器</code></a> <a href="#CSS%E5%9F%BA%E6%9C%AC%E6%A0%B7%E5%BC%8F%E7%BC%96%E5%86%992"><code>2.盒子模型</code></a> <a href="#CSS%E5%9F%BA%E6%9C%AC%E6%A0%B7%E5%BC%8F%E7%BC%96%E5%86%993"><code>3.定位、浮动</code></a></p><h2 id="CSS选择器"><a href="#CSS选择器" class="headerlink" title="CSS选择器"></a><span id="CSS基本样式编写1">CSS选择器</span></h2><ul><li>简单选择器（根据名称、id、类来选取元素）</li><li>组合器选择器（根据它们之间的特定关系来选取元素）</li><li>伪类选择器（根据特定状态选取元素）</li><li>伪元素选择器（选取元素的一部分并设置其样式）</li><li>属性选择器（根据属性或属性值来选取元素）</li></ul><table><thead><tr><th align="left">简单选择器</th><th align="left">例子</th><th align="center">例子描述</th><th align="center">类型</th></tr></thead><tbody><tr><td align="left">.class</td><td align="left">.box</td><td align="center">选取所有 class=”box” 的元素</td><td align="center">元素选择器</td></tr><tr><td align="left">#id</td><td align="left">#firstname</td><td align="center">选取id=”firstname”的那个元素</td><td align="center">id选择器</td></tr><tr><td align="left">*</td><td align="left">*</td><td align="center">选取所有元素</td><td align="center">通用选择器</td></tr><tr><td align="left">element</td><td align="left">p</td><td align="center">选取所有<code>&lt;p&gt;</code>元素</td><td align="center">类选择器</td></tr><tr><td align="left">element,element</td><td align="left">div,p</td><td align="center">选取所有<code>&lt;div&gt;</code>元素和所有<code>&lt;p&gt;</code>元素</td><td align="center">分组选择器</td></tr></tbody></table><table><thead><tr><th align="left">组合器选择器</th><th align="right">例子</th><th align="center">例子描述</th><th align="center">类型</th></tr></thead><tbody><tr><td align="left">element element</td><td align="right">div p</td><td align="center">选择 <code>&lt;div&gt;</code> 元素内的所有<code> &lt;p&gt;</code> 元素</td><td align="center">后代选择器</td></tr><tr><td align="left">element&gt;element</td><td align="right">div &gt; p</td><td align="center">选择其父元素是 <code>&lt;div&gt;</code> 元素的所有 <code>&lt;p&gt;</code> 元素</td><td align="center">子选择器</td></tr><tr><td align="left">element+element</td><td align="right">div + p</td><td align="center">选择所有紧随 <code>&lt;div&gt;</code> 元素之后的 <code>&lt;p&gt;</code> 元素</td><td align="center">相邻兄弟选择器</td></tr><tr><td align="left">element~element</td><td align="right">p ~ ul</td><td align="center">选择前面有 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;ul&gt;</code> 元素</td><td align="center">通用兄弟选择器</td></tr></tbody></table><table><thead><tr><th align="left">伪类选择器</th><th align="left">例子</th><th align="center">例子描述</th></tr></thead><tbody><tr><td align="left">:active</td><td align="left">a:active</td><td align="center">选择活动的链接。</td></tr><tr><td align="left">:link</td><td align="left">a:link</td><td align="center">选择所有未被访问的链接。</td></tr><tr><td align="left">:visited</td><td align="left">a:visited</td><td align="center">选择所有已访问的链接。</td></tr><tr><td align="left">:hover</td><td align="left">a:hover</td><td align="center">选择鼠标悬停其上的链接。</td></tr><tr><td align="left">:root</td><td align="left">root</td><td align="center">选择元素的根元素。</td></tr><tr><td align="left">:target</td><td align="left">#news:target</td><td align="center">选择当前活动的 #news 元素（单击包含该锚名称的 URL）。</td></tr><tr><td align="left">:empty</td><td align="left">p:empty</td><td align="center">选择没有子元素的每个 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td align="left">:first-child</td><td align="left">p:first-child</td><td align="center">选择作为其父的首个子元素的每个<code> &lt;p&gt;</code> 元素。</td></tr><tr><td align="left">:first-of-type</td><td align="left">p:first-of-type</td><td align="center">选择作为其父的首个 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td align="left">:lang(language)</td><td align="left">p:lang(it)</td><td align="center">选择每个 lang 属性值以 “it” 开头的 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td align="left">:last-child</td><td align="left">p:last-child</td><td align="center">选择作为其父的最后一个子元素的每个 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td align="left">:last-of-type</td><td align="left">p:last-of-type</td><td align="center">选择作为其父的最后一个 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt; </code>元素。</td></tr><tr><td align="left">:not(selector)</td><td align="left">:not(p)</td><td align="center">选择每个非 <code>&lt;p&gt;</code> 元素的元素。</td></tr><tr><td align="left">:nth-child(n)</td><td align="left">p:nth-child(2)</td><td align="center">选择作为其父的第二个子元素的每个 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td align="left">:nth-last-child(n)</td><td align="left">p:nth-last-child(2)</td><td align="center">选择作为父的第二个子元素的每个<code>&lt;p&gt;</code>元素，从最后一个子元素计数。</td></tr><tr><td align="left">:nth-last-of-type(n)</td><td align="left">p:nth-last-of-type(2)</td><td align="center">选择作为父的第二个<code>&lt;p&gt;</code>元素的每个<code>&lt;p&gt;</code>元素，从最后一个子元素计数</td></tr><tr><td align="left">:nth-of-type(n)</td><td align="left">p:nth-of-type(2)</td><td align="center">选择作为其父的第二个 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td align="left">:only-of-type</td><td align="left">p:only-of-type</td><td align="center">选择作为其父的唯一 <code>&lt;p&gt;</code> 元素的每个 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td align="left">:only-child</td><td align="left">p:only-child</td><td align="center">选择作为其父的唯一子元素的 <code>&lt;p&gt;</code> 元素。</td></tr><tr><td align="left">:focus</td><td align="left">input:focus</td><td align="center">选择获得焦点的 <code>&lt;input&gt;</code> 元素。</td></tr><tr><td align="left">:enabled</td><td align="left">input:enabled</td><td align="center">选择每个已启用的 <code>&lt;input&gt;</code> 元素。</td></tr><tr><td align="left">:checked</td><td align="left">input:checked</td><td align="center">选择每个被选中的 <code>&lt;input&gt;</code> 元素。</td></tr><tr><td align="left">:disabled</td><td align="left">input:disabled</td><td align="center">选择每个被禁用的 <code>&lt;input&gt;</code> 元素。</td></tr><tr><td align="left">:in-range</td><td align="left">input:in-range</td><td align="center">选择具有指定范围内的值的 <code>&lt;input&gt;</code> 元素。</td></tr><tr><td align="left">:out-of-range</td><td align="left">input:out-of-range</td><td align="center">选择值在指定范围之外的 <code>&lt;input&gt;</code> 元素。</td></tr><tr><td align="left">:valid</td><td align="left">input:valid</td><td align="center">选择所有具有有效值的 <code>&lt;input&gt;</code> 元素。</td></tr><tr><td align="left">:invalid</td><td align="left">input:invalid</td><td align="center">选择所有具有无效值的 <code>&lt;input&gt;</code> 元素。</td></tr><tr><td align="left">:optional</td><td align="left">input:optional</td><td align="center">选择不带 “required” 属性的 <code>&lt;input&gt;</code> 元素。</td></tr><tr><td align="left">:read-only</td><td align="left">input:read-only</td><td align="center">选择指定了 “readonly” 属性的 <code>&lt;input&gt;</code> 元素。</td></tr><tr><td align="left">:read-write</td><td align="left">input:read-write</td><td align="center">选择不带 “readonly” 属性的 <code>&lt;input&gt;</code> 元素。</td></tr><tr><td align="left">:required</td><td align="left">input:required</td><td align="center">选择指定了 “required” 属性的 <code>&lt;input&gt;</code> 元素。</td></tr></tbody></table><table><thead><tr><th align="left">伪元素~</th><th align="left">例子</th><th align="center">例子描述</th><th align="center">使用条件</th></tr></thead><tbody><tr><td align="left">::after</td><td align="left">p::after</td><td align="center">在每个 <code>&lt;p&gt;</code> 元素之后插入内容。</td><td align="center"></td></tr><tr><td align="left">::before</td><td align="left">p::before</td><td align="center">在每个 <code>&lt;p&gt;</code> 元素之前插入内容。</td><td align="center"></td></tr><tr><td align="left">::first-letter</td><td align="left">p::first-letter</td><td align="center">选择每个 <code>&lt;p&gt;</code> 元素的首字母。</td><td align="center">只能应用于块级元素,字体属性、颜色属性、背景属性、word-spacing、letter-spacing、text-decoration、vertical-align、text-transform、line-height、clear</td></tr><tr><td align="left">::first-line</td><td align="left">p::first-line</td><td align="center">选择每个 <code>&lt;p&gt;</code> 元素的首行。</td><td align="center">适用于块级元素。字体属性、颜色属性、背景属性、外边距属性、内边距属性、边框属性、text-decoration、vertical-align（仅当 “float” 为 “none”）、text-transform、line-height、float、clear</td></tr><tr><td align="left">::selection</td><td align="left">p::selection</td><td align="center">选择用户选择的元素部分。</td><td align="center">匹配用户选择的元素部分。color、background、cursor、outline</td></tr></tbody></table><table><thead><tr><th align="left">属性选择器</th><th align="left">例子</th><th align="center">例子描述</th></tr></thead><tbody><tr><td align="left">[attribute]</td><td align="left">[target]</td><td align="center">选择带有 target 属性的所有元素。</td></tr><tr><td align="left">[attribute=value]</td><td align="left">[target=_blank]</td><td align="center">选择带有 target=”_blank” 属性的所有元素。</td></tr><tr><td align="left">[attribute~=value]</td><td align="left">[title~=flower]</td><td align="center">选择带有包含 “flower” 一词的 title 属性的所有元素。</td></tr><tr><td align="left">[attribute`</td><td align="left">`=value]</td><td align="center">[lang`</td></tr><tr><td align="left">[attribute^=value]</td><td align="left">a[href^=”https”]</td><td align="center">选择其 href 属性值以 “https” 开头的每个 <code>&lt;a&gt;</code> 元素。</td></tr><tr><td align="left">[attribute$=value]</td><td align="left">a[href$=”.pdf”]</td><td align="center">选择其 href 属性值以 “.pdf” 结尾的每个 <code>&lt;a&gt;</code> 元素。</td></tr><tr><td align="left">[attribute*=value]</td><td align="left">a[href*=”w3school”]</td><td align="center">选择其 href 属性值包含子串 “w3school” 的每个 <code>&lt;a&gt;</code> 元素。</td></tr></tbody></table><h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a><span id="CSS基本样式编写2">盒子模型</span></h2><ul><li><p>CSS盒模型本质上是一个盒子，封装周围的HTML元素，它包括：边距，边框，填充，和实际内容。</p></li><li><p>Margin(外边距) - 清除边框外的区域，外边距是透明的。</p></li><li><p>Border(边框) - 围绕在内边距和内容外的边框。</p></li><li><p>Padding(内边距) - 清除内容周围的区域，内边距是透明的。</p></li><li><p>Content(内容) - 盒子的内容，显示文本和图像。</p></li></ul><h2 id="定位、浮动"><a href="#定位、浮动" class="headerlink" title="定位、浮动"></a><span id="CSS基本样式编写3">定位、浮动</span></h2><ul><li>让元素脱离文档流的方法：浮动和定位。</li></ul>]]></content>
    
    
    <categories>
      
      <category>HTML5+CSS3</category>
      
      <category>CSS基本样式编写</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CSS基本样式编写</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
